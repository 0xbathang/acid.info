"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTeamFile = exports.getTeamFromCustomFile = exports.findTeamByBusinessUnit = exports.createCommonDataDir = void 0;
const tslib_1 = require("tslib");
const utils_validation_1 = require("@docusaurus/utils-validation");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const types_1 = require("../types");
const COMMON_DATA_DIR = path.join(__dirname, '../../static/common/data');
const createCommonDataDir = () => void fs.ensureDirSync(COMMON_DATA_DIR);
exports.createCommonDataDir = createCommonDataDir;
const findTeamByBusinessUnit = (bu) => {
    const contacts = require(path.join(COMMON_DATA_DIR, '../contacts.json'));
    const departments = ({
        [types_1.BusinessUnits.Codex]: [types_1.Status.Department.Codex],
        [types_1.BusinessUnits.Waku]: [
            types_1.Status.Department.WakuProduct,
            types_1.Status.Department.WakuResearch,
        ],
    }[bu] ?? []).map((dep) => dep.toLowerCase());
    return Object.values(contacts).filter((contact) => !!contact.department &&
        departments.includes(contact.department.toLowerCase()));
};
exports.findTeamByBusinessUnit = findTeamByBusinessUnit;
const getTeamFromCustomFile = (filename) => {
    const contact = JSON.parse(fs.readFileSync(filename).toString());
    const schema = utils_validation_1.Joi.array().items(utils_validation_1.Joi.object({
        name: utils_validation_1.Joi.string().min(1).required(),
        image: utils_validation_1.Joi.string().example('team/Name.jpg').required(),
        contact: utils_validation_1.Joi.object({
            email: utils_validation_1.Joi.string().allow(null).optional(),
            status: utils_validation_1.Joi.string().allow(null).optional(),
            github: utils_validation_1.Joi.string().allow(null).optional(),
            discord: utils_validation_1.Joi.string().allow(null).optional(),
            gscholar: utils_validation_1.Joi.string().allow(null).optional(),
        })
            .optional()
            .default({}),
    }));
    const result = schema.validate(contact, { abortEarly: false });
    if (result.error)
        throw result.error;
    return contact.map(({ name, image, contact }) => ({
        'pref-name': name,
        department: null,
        'photo-path': image,
        contact,
    }));
};
exports.getTeamFromCustomFile = getTeamFromCustomFile;
const createTeamFile = (context, options) => {
    const filename = options?.contactInfo
        ? path.isAbsolute(options.contactInfo)
            ? options.contactInfo
            : path.join(context.siteDir, options.contactInfo)
        : path.join(COMMON_DATA_DIR, '../contacts.json');
    const team = options.contactInfo
        ? (0, exports.getTeamFromCustomFile)(filename)
        : (0, exports.findTeamByBusinessUnit)(options.businessUnit);
    fs.writeFileSync(path.join(COMMON_DATA_DIR, 'team.json'), Buffer.from(JSON.stringify(team)));
};
exports.createTeamFile = createTeamFile;
