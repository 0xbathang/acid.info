"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOptions = void 0;
const tslib_1 = require("tslib");
const preset_classic_1 = tslib_1.__importDefault(require("@docusaurus/preset-classic"));
const path = tslib_1.__importStar(require("path"));
const index_1 = require("./site-config/index");
const index_2 = require("./theme-config/index");
const types_1 = require("./types");
const data_utils_1 = require("./utils/data.utils");
const docs_utils_1 = require("./utils/docs.utils");
const object_utils_1 = require("./utils/object.utils");
const makeSearchPluginConfig = (plugins, options) => {
    const singleIndex = options.localSearch?.singleIndex ?? true;
    const docs = (0, docs_utils_1.findDocInstances)(plugins).map((plugin) => (0, docs_utils_1.validateDocPluginOptions)(plugin[1]));
    const config = {
        hashed: true,
        indexDocs: true,
        indexBlog: false,
        indexPages: true,
        docsDir: docs.map((doc) => doc.path),
        docsRouteBasePath: docs.map((doc) => doc.routeBasePath),
    };
    if (!singleIndex) {
        config.searchContextByPaths = docs.map(({ routeBasePath, path }) => routeBasePath === '/'
            ? path
            : routeBasePath.startsWith('/')
                ? routeBasePath.slice(1)
                : routeBasePath);
    }
    return [['@acid-info/logos-docusaurus-search-local', config]];
};
function logosPreset(context, options) {
    const docsEnabled = options.docs !== false;
    const siteConfig = (0, object_utils_1.defaultsDeep)(options.customSiteConfig
        ? [{}, context.siteConfig, index_1.siteConfigs[options.businessUnit]]
        : [index_1.siteConfigs[options.businessUnit], context.siteConfig], false);
    siteConfig.staticDirectories = [
        ...(siteConfig.staticDirectories ?? []),
        path.join(__dirname, '../static/common'),
        path.join(__dirname, '../static', options.businessUnit),
    ];
    siteConfig.themeConfig = index_2.themeConfigs[options.businessUnit](context.siteConfig.themeConfig);
    Object.entries(siteConfig).forEach(([key, value]) => (context.siteConfig[key] = value));
    (0, data_utils_1.createCommonDataDir)();
    (0, data_utils_1.createTeamFile)(context, options);
    const { plugins = [], themes = [] } = (0, preset_classic_1.default)(context, {
        docs: docsEnabled
            ? {
                routeBasePath: '/',
                ...(options.docs ?? {}),
            }
            : false,
        theme: {},
    });
    plugins.push('docusaurus-plugin-sass');
    if (options.theme?.name !== types_1.ThemeNames.DocusaurusDefault)
        plugins.push(
        // changing the order of plugins passed to makeSearchPluginConfig function
        // may cause the search plugin to skip indexing some pages.
        ...makeSearchPluginConfig([...plugins, ...context.siteConfig.plugins], options));
    if (options.theme?.name === types_1.ThemeNames.Default)
        themes.push([
            '@acid-info/logos-docusaurus-theme',
            options.theme?.options ?? {},
        ]);
    return {
        plugins,
        themes,
    };
}
exports.default = logosPreset;
tslib_1.__exportStar(require("./types"), exports);
var validateOptions_1 = require("./validateOptions");
Object.defineProperty(exports, "validateOptions", { enumerable: true, get: function () { return validateOptions_1.validateOptions; } });
