"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const theme_common_1 = require("@docusaurus/theme-common");
const internal_1 = require("@docusaurus/theme-common/internal");
const Link_1 = tslib_1.__importDefault(require("@docusaurus/Link"));
const Translate_1 = require("@docusaurus/Translate");
const useIsBrowser_1 = tslib_1.__importDefault(require("@docusaurus/useIsBrowser"));
const DocSidebarItems_1 = tslib_1.__importDefault(require("@theme/DocSidebarItems"));
const lsd_react_1 = require("@acid-info/lsd-react");
// If we navigate to a category and it becomes active, it should automatically
// expand itself
function useAutoExpandActiveCategory({ isActive, collapsed, updateCollapsed }) {
    const wasActive = (0, theme_common_1.usePrevious)(isActive);
    (0, react_1.useEffect)(() => {
        const justBecameActive = isActive && !wasActive;
        if (justBecameActive && collapsed) {
            updateCollapsed(false);
        }
    }, [isActive, wasActive, collapsed, updateCollapsed]);
}
/**
 * When a collapsible category has no link, we still link it to its first child
 * during SSR as a temporary fallback. This allows to be able to navigate inside
 * the category even when JS fails to load, is delayed or simply disabled
 * React hydration becomes an optional progressive enhancement
 * see https://github.com/facebookincubator/infima/issues/36#issuecomment-772543188
 * see https://github.com/facebook/docusaurus/issues/3030
 */
function useCategoryHrefWithSSRFallback(item) {
    const isBrowser = (0, useIsBrowser_1.default)();
    return (0, react_1.useMemo)(() => {
        if (item.href) {
            return item.href;
        }
        // In these cases, it's not necessary to render a fallback
        // We skip the "findFirstCategoryLink" computation
        if (isBrowser || !item.collapsible) {
            return undefined;
        }
        return (0, internal_1.findFirstCategoryLink)(item);
    }, [item, isBrowser]);
}
function CollapseButton({ categoryLabel, onClick }) {
    return (react_1.default.createElement("button", { "aria-label": (0, Translate_1.translate)({
            id: 'theme.DocSidebarItem.toggleCollapsedCategoryAriaLabel',
            message: "Toggle the collapsible sidebar category '{label}'",
            description: 'The ARIA label to toggle the collapsible sidebar category',
        }, { label: categoryLabel }), type: "button", className: "clean-btn menu__caret", onClick: onClick }));
}
function DocSidebarItemCategory({ item, onItemClick, activePath, level, index, ...props }) {
    const { items, label, collapsible, className, href } = item;
    const { docs: { sidebar: { autoCollapseCategories }, }, } = (0, theme_common_1.useThemeConfig)();
    const hrefWithSSRFallback = useCategoryHrefWithSSRFallback(item);
    const isActive = (0, internal_1.isActiveSidebarItem)(item, activePath);
    const isCurrentPage = (0, internal_1.isSamePath)(href, activePath);
    const { collapsed, setCollapsed } = (0, theme_common_1.useCollapsible)({
        // Active categories are always initialized as expanded. The default
        // (`item.collapsed`) is only used for non-active categories.
        initialState: () => {
            if (!collapsible) {
                return false;
            }
            return isActive ? false : item.collapsed;
        },
    });
    const { expandedItem, setExpandedItem } = (0, internal_1.useDocSidebarItemsExpandedState)();
    // Use this instead of `setCollapsed`, because it is also reactive
    const updateCollapsed = (toCollapsed = !collapsed) => {
        setExpandedItem(toCollapsed ? null : index);
        setCollapsed(toCollapsed);
    };
    useAutoExpandActiveCategory({ isActive, collapsed, updateCollapsed });
    (0, react_1.useEffect)(() => {
        if (collapsible &&
            expandedItem != null &&
            expandedItem !== index &&
            autoCollapseCategories) {
            setCollapsed(true);
        }
    }, [collapsible, expandedItem, index, setCollapsed, autoCollapseCategories]);
    return (react_1.default.createElement("li", { className: (0, clsx_1.default)(theme_common_1.ThemeClassNames.docs.docSidebarItemCategory, theme_common_1.ThemeClassNames.docs.docSidebarItemCategoryLevel(level), 'menu__list-item', {
            'menu__list-item--collapsed': collapsed,
        }, className) },
        react_1.default.createElement("div", { className: (0, clsx_1.default)('menu__list-item-collapsible', {
                'menu__list-item-collapsible--active': isCurrentPage,
            }) },
            react_1.default.createElement(Link_1.default, { className: (0, clsx_1.default)('menu__link', {
                    'menu__link--sublist': collapsible,
                    'menu__link--active': isActive,
                }), onClick: collapsible
                    ? (e) => {
                        onItemClick?.(item);
                        if (href) {
                            updateCollapsed(false);
                        }
                        else {
                            e.preventDefault();
                            updateCollapsed();
                        }
                    }
                    : () => {
                        onItemClick?.(item);
                    }, "aria-current": isCurrentPage ? 'page' : undefined, "aria-expanded": collapsible ? !collapsed : undefined, href: collapsible ? hrefWithSSRFallback ?? '#' : hrefWithSSRFallback, ...props },
                react_1.default.createElement(lsd_react_1.Typography, { variant: "body2", color: "primary" }, label),
                collapsed ? react_1.default.createElement(lsd_react_1.ArrowUpIcon, null) : react_1.default.createElement(lsd_react_1.ArrowDownIcon, null)),
            href && collapsible && (react_1.default.createElement(CollapseButton, { categoryLabel: label, onClick: (e) => {
                    e.preventDefault();
                    updateCollapsed();
                } }))),
        react_1.default.createElement(theme_common_1.Collapsible, { lazy: true, as: "ul", className: "menu__list", collapsed: collapsed },
            react_1.default.createElement(DocSidebarItems_1.default, { items: items, tabIndex: collapsed ? -1 : 0, onItemClick: onItemClick, activePath: activePath, level: level + 1 }))));
}
exports.default = DocSidebarItemCategory;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
