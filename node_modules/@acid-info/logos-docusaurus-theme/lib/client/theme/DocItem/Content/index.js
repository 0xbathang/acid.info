"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const theme_common_1 = require("@docusaurus/theme-common");
const internal_1 = require("@docusaurus/theme-common/internal");
const Heading_1 = tslib_1.__importDefault(require("@theme/Heading"));
const MDXContent_1 = tslib_1.__importDefault(require("@theme/MDXContent"));
/**
 Title can be declared inside md content or declared through
 front matter and added manually. To make both cases consistent,
 the added title is added under the same div.markdown block
 See https://github.com/facebook/docusaurus/pull/4882#issuecomment-853021120

 We render a "synthetic title" if:
 - user doesn't ask to hide it with front matter
 - the markdown content does not already contain a top-level h1 heading
*/
function useSyntheticTitle() {
    const { metadata, frontMatter, contentTitle } = (0, internal_1.useDoc)();
    const shouldRender = !frontMatter.hide_title && typeof contentTitle === 'undefined';
    if (!shouldRender) {
        return null;
    }
    return metadata.title;
}
function DocItemContent({ children }) {
    const syntheticTitle = useSyntheticTitle();
    return (react_1.default.createElement("div", { className: (0, clsx_1.default)(theme_common_1.ThemeClassNames.docs.docMarkdown, 'markdown') },
        syntheticTitle && (react_1.default.createElement("header", null,
            react_1.default.createElement(Heading_1.default, { as: "h1" }, syntheticTitle))),
        react_1.default.createElement(MDXContent_1.default, null, children)));
}
exports.default = DocItemContent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvdGhlbWUvRG9jSXRlbS9Db250ZW50L2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBeUI7QUFDekIsd0RBQXVCO0FBQ3ZCLDJEQUEwRDtBQUMxRCxnRUFBMEQ7QUFDMUQscUVBQW9DO0FBQ3BDLDJFQUEwQztBQUMxQzs7Ozs7Ozs7O0VBU0U7QUFDRixTQUFTLGlCQUFpQjtJQUN4QixNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFBLGlCQUFNLEdBQUUsQ0FBQTtJQUN4RCxNQUFNLFlBQVksR0FDaEIsQ0FBQyxXQUFXLENBQUMsVUFBVSxJQUFJLE9BQU8sWUFBWSxLQUFLLFdBQVcsQ0FBQTtJQUNoRSxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFDRCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUE7QUFDdkIsQ0FBQztBQUNELFNBQXdCLGNBQWMsQ0FBQyxFQUFFLFFBQVEsRUFBRTtJQUNqRCxNQUFNLGNBQWMsR0FBRyxpQkFBaUIsRUFBRSxDQUFBO0lBQzFDLE9BQU8sQ0FDTCx1Q0FBSyxTQUFTLEVBQUUsSUFBQSxjQUFJLEVBQUMsOEJBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQztRQUMvRCxjQUFjLElBQUksQ0FDakI7WUFDRSw4QkFBQyxpQkFBTyxJQUFDLEVBQUUsRUFBQyxJQUFJLElBQUUsY0FBYyxDQUFXLENBQ3BDLENBQ1Y7UUFDRCw4QkFBQyxvQkFBVSxRQUFFLFFBQVEsQ0FBYyxDQUMvQixDQUNQLENBQUE7QUFDSCxDQUFDO0FBWkQsaUNBWUMiLCJmaWxlIjoiY2xpZW50L3RoZW1lL0RvY0l0ZW0vQ29udGVudC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnXG5pbXBvcnQgeyBUaGVtZUNsYXNzTmFtZXMgfSBmcm9tICdAZG9jdXNhdXJ1cy90aGVtZS1jb21tb24nXG5pbXBvcnQgeyB1c2VEb2MgfSBmcm9tICdAZG9jdXNhdXJ1cy90aGVtZS1jb21tb24vaW50ZXJuYWwnXG5pbXBvcnQgSGVhZGluZyBmcm9tICdAdGhlbWUvSGVhZGluZydcbmltcG9ydCBNRFhDb250ZW50IGZyb20gJ0B0aGVtZS9NRFhDb250ZW50J1xuLyoqXG4gVGl0bGUgY2FuIGJlIGRlY2xhcmVkIGluc2lkZSBtZCBjb250ZW50IG9yIGRlY2xhcmVkIHRocm91Z2hcbiBmcm9udCBtYXR0ZXIgYW5kIGFkZGVkIG1hbnVhbGx5LiBUbyBtYWtlIGJvdGggY2FzZXMgY29uc2lzdGVudCxcbiB0aGUgYWRkZWQgdGl0bGUgaXMgYWRkZWQgdW5kZXIgdGhlIHNhbWUgZGl2Lm1hcmtkb3duIGJsb2NrXG4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9kb2N1c2F1cnVzL3B1bGwvNDg4MiNpc3N1ZWNvbW1lbnQtODUzMDIxMTIwXG5cbiBXZSByZW5kZXIgYSBcInN5bnRoZXRpYyB0aXRsZVwiIGlmOlxuIC0gdXNlciBkb2Vzbid0IGFzayB0byBoaWRlIGl0IHdpdGggZnJvbnQgbWF0dGVyXG4gLSB0aGUgbWFya2Rvd24gY29udGVudCBkb2VzIG5vdCBhbHJlYWR5IGNvbnRhaW4gYSB0b3AtbGV2ZWwgaDEgaGVhZGluZ1xuKi9cbmZ1bmN0aW9uIHVzZVN5bnRoZXRpY1RpdGxlKCkge1xuICBjb25zdCB7IG1ldGFkYXRhLCBmcm9udE1hdHRlciwgY29udGVudFRpdGxlIH0gPSB1c2VEb2MoKVxuICBjb25zdCBzaG91bGRSZW5kZXIgPVxuICAgICFmcm9udE1hdHRlci5oaWRlX3RpdGxlICYmIHR5cGVvZiBjb250ZW50VGl0bGUgPT09ICd1bmRlZmluZWQnXG4gIGlmICghc2hvdWxkUmVuZGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICByZXR1cm4gbWV0YWRhdGEudGl0bGVcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERvY0l0ZW1Db250ZW50KHsgY2hpbGRyZW4gfSkge1xuICBjb25zdCBzeW50aGV0aWNUaXRsZSA9IHVzZVN5bnRoZXRpY1RpdGxlKClcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzeChUaGVtZUNsYXNzTmFtZXMuZG9jcy5kb2NNYXJrZG93biwgJ21hcmtkb3duJyl9PlxuICAgICAge3N5bnRoZXRpY1RpdGxlICYmIChcbiAgICAgICAgPGhlYWRlcj5cbiAgICAgICAgICA8SGVhZGluZyBhcz1cImgxXCI+e3N5bnRoZXRpY1RpdGxlfTwvSGVhZGluZz5cbiAgICAgICAgPC9oZWFkZXI+XG4gICAgICApfVxuICAgICAgPE1EWENvbnRlbnQ+e2NoaWxkcmVufTwvTURYQ29udGVudD5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIl19
