"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchResults = void 0;
const tslib_1 = require("tslib");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = tslib_1.__importStar(require("react"));
const SearchResultGroup_1 = require("../SearchResultGroup");
const SearchResultItem_1 = require("../SearchResultItem");
const SearchResultMessage_1 = require("../SearchResultMessage/SearchResultMessage");
const groupSearchResult_1 = require("../utils/groupSearchResult");
const SearchResults_module_scss_1 = tslib_1.__importDefault(require("./SearchResults.module.scss"));
const SearchResults = ({ results, className, onNavigate, ...props }) => {
    const total = results.length;
    const grouped = (0, react_1.useMemo)(() => (0, groupSearchResult_1.groupSearchResult)(results), [results]);
    return (react_1.default.createElement("div", { className: (0, clsx_1.default)(SearchResults_module_scss_1.default.root, total === 0 && SearchResults_module_scss_1.default.noResults) },
        total === 0 && react_1.default.createElement(SearchResultMessage_1.SearchResultMessage, null, "No result."),
        react_1.default.createElement("div", { className: (0, clsx_1.default)(SearchResults_module_scss_1.default.groups, 'hidden-scrollbar') }, grouped.map(([category, items], index) => (react_1.default.createElement(react_1.default.Fragment, { key: index },
            react_1.default.createElement(SearchResultGroup_1.SearchResultGroup, { className: SearchResults_module_scss_1.default.group, title: category }, items.map((item, itemIndex) => (react_1.default.createElement(SearchResultItem_1.SearchResultItem, { key: itemIndex, type: item.type, href: item.href, title: item.title, content: item.content, linkProps: onNavigate ? { onClick: (e) => onNavigate(e, item) } : {} }))))))))));
};
exports.SearchResults = SearchResults;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvdGhlbWUvU2VhcmNoQmFyL1NlYXJjaFJlc3VsdHMvU2VhcmNoUmVzdWx0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdEQUF1QjtBQUN2Qix1REFBc0M7QUFDdEMsNERBQXdEO0FBQ3hELDBEQUFzRDtBQUN0RCxvRkFBZ0Y7QUFFaEYsa0VBQThEO0FBQzlELG9HQUFnRDtBQVV6QyxNQUFNLGFBQWEsR0FBaUMsQ0FBQyxFQUMxRCxPQUFPLEVBQ1AsU0FBUyxFQUNULFVBQVUsRUFDVixHQUFHLEtBQUssRUFDVCxFQUFFLEVBQUU7SUFDSCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFBO0lBQzVCLE1BQU0sT0FBTyxHQUFHLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEscUNBQWlCLEVBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBRXBFLE9BQU8sQ0FDTCx1Q0FBSyxTQUFTLEVBQUUsSUFBQSxjQUFJLEVBQUMsbUNBQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsSUFBSSxtQ0FBTSxDQUFDLFNBQVMsQ0FBQztRQUMvRCxLQUFLLEtBQUssQ0FBQyxJQUFJLDhCQUFDLHlDQUFtQixxQkFBaUM7UUFDckUsdUNBQUssU0FBUyxFQUFFLElBQUEsY0FBSSxFQUFDLG1DQUFNLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLElBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQ3pDLDhCQUFDLGVBQUssQ0FBQyxRQUFRLElBQUMsR0FBRyxFQUFFLEtBQUs7WUFDeEIsOEJBQUMscUNBQWlCLElBQUMsU0FBUyxFQUFFLG1DQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLElBQ3hELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUM5Qiw4QkFBQyxtQ0FBZ0IsSUFDZixHQUFHLEVBQUUsU0FBUyxFQUNkLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUNqQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFDckIsU0FBUyxFQUNQLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUUzRCxDQUNILENBQUMsQ0FDZ0IsQ0FDTCxDQUNsQixDQUFDLENBQ0UsQ0FDRixDQUNQLENBQUE7QUFDSCxDQUFDLENBQUE7QUFsQ1ksUUFBQSxhQUFhLGlCQWtDekIiLCJmaWxlIjoiY2xpZW50L3RoZW1lL1NlYXJjaEJhci9TZWFyY2hSZXN1bHRzL1NlYXJjaFJlc3VsdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xzeCBmcm9tICdjbHN4J1xuaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFNlYXJjaFJlc3VsdEdyb3VwIH0gZnJvbSAnLi4vU2VhcmNoUmVzdWx0R3JvdXAnXG5pbXBvcnQgeyBTZWFyY2hSZXN1bHRJdGVtIH0gZnJvbSAnLi4vU2VhcmNoUmVzdWx0SXRlbSdcbmltcG9ydCB7IFNlYXJjaFJlc3VsdE1lc3NhZ2UgfSBmcm9tICcuLi9TZWFyY2hSZXN1bHRNZXNzYWdlL1NlYXJjaFJlc3VsdE1lc3NhZ2UnXG5pbXBvcnQgeyBTZWFyY2hSZXN1bHQsIFNlYXJjaFJlc3VsdEdyb3VwSXRlbSB9IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHsgZ3JvdXBTZWFyY2hSZXN1bHQgfSBmcm9tICcuLi91dGlscy9ncm91cFNlYXJjaFJlc3VsdCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9TZWFyY2hSZXN1bHRzLm1vZHVsZS5zY3NzJ1xuXG5leHBvcnQgdHlwZSBTZWFyY2hSZXN1bHRzUHJvcHMgPSBPbWl0PFxuICBSZWFjdC5IVE1MUHJvcHM8SFRNTElucHV0RWxlbWVudD4sXG4gICdyZXN1bHRzJ1xuPiAmIHtcbiAgcmVzdWx0czogU2VhcmNoUmVzdWx0W11cbiAgb25OYXZpZ2F0ZT86IChlOiBSZWFjdC5Nb3VzZUV2ZW50PGFueT4sIGl0ZW06IFNlYXJjaFJlc3VsdEdyb3VwSXRlbSkgPT4gdm9pZFxufVxuXG5leHBvcnQgY29uc3QgU2VhcmNoUmVzdWx0czogUmVhY3QuRkM8U2VhcmNoUmVzdWx0c1Byb3BzPiA9ICh7XG4gIHJlc3VsdHMsXG4gIGNsYXNzTmFtZSxcbiAgb25OYXZpZ2F0ZSxcbiAgLi4ucHJvcHNcbn0pID0+IHtcbiAgY29uc3QgdG90YWwgPSByZXN1bHRzLmxlbmd0aFxuICBjb25zdCBncm91cGVkID0gdXNlTWVtbygoKSA9PiBncm91cFNlYXJjaFJlc3VsdChyZXN1bHRzKSwgW3Jlc3VsdHNdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Nsc3goc3R5bGVzLnJvb3QsIHRvdGFsID09PSAwICYmIHN0eWxlcy5ub1Jlc3VsdHMpfT5cbiAgICAgIHt0b3RhbCA9PT0gMCAmJiA8U2VhcmNoUmVzdWx0TWVzc2FnZT5ObyByZXN1bHQuPC9TZWFyY2hSZXN1bHRNZXNzYWdlPn1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbHN4KHN0eWxlcy5ncm91cHMsICdoaWRkZW4tc2Nyb2xsYmFyJyl9PlxuICAgICAgICB7Z3JvdXBlZC5tYXAoKFtjYXRlZ29yeSwgaXRlbXNdLCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2luZGV4fT5cbiAgICAgICAgICAgIDxTZWFyY2hSZXN1bHRHcm91cCBjbGFzc05hbWU9e3N0eWxlcy5ncm91cH0gdGl0bGU9e2NhdGVnb3J5fT5cbiAgICAgICAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSwgaXRlbUluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPFNlYXJjaFJlc3VsdEl0ZW1cbiAgICAgICAgICAgICAgICAgIGtleT17aXRlbUluZGV4fVxuICAgICAgICAgICAgICAgICAgdHlwZT17aXRlbS50eXBlfVxuICAgICAgICAgICAgICAgICAgaHJlZj17aXRlbS5ocmVmfVxuICAgICAgICAgICAgICAgICAgdGl0bGU9e2l0ZW0udGl0bGV9XG4gICAgICAgICAgICAgICAgICBjb250ZW50PXtpdGVtLmNvbnRlbnR9XG4gICAgICAgICAgICAgICAgICBsaW5rUHJvcHM9e1xuICAgICAgICAgICAgICAgICAgICBvbk5hdmlnYXRlID8geyBvbkNsaWNrOiAoZSkgPT4gb25OYXZpZ2F0ZShlLCBpdGVtKSB9IDoge31cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvU2VhcmNoUmVzdWx0R3JvdXA+XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIl19
