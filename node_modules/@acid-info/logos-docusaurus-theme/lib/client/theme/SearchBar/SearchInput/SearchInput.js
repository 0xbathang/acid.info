"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchInput = void 0;
const tslib_1 = require("tslib");
const lsd_react_1 = require("@acid-info/lsd-react");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = tslib_1.__importDefault(require("react"));
const react_use_1 = require("react-use");
const SearchInput_module_scss_1 = tslib_1.__importDefault(require("./SearchInput.module.scss"));
const SearchInput = ({ value = '', active, onChange, onClear, onFocus: onFocusCallback, onCancel, className, inputProps: { ref: inputRef, ...inputProps } = { placeholder: '' }, containerRef, ...props }) => {
    const isMobile = (0, react_use_1.useMedia)('(max-width: 996px)');
    const expanded = active || value?.length > 0;
    const onFocus = (event) => {
        onFocusCallback && onFocusCallback();
    };
    return (react_1.default.createElement("div", { ref: containerRef, className: (0, clsx_1.default)(SearchInput_module_scss_1.default.root, expanded && SearchInput_module_scss_1.default.expanded, className), onKeyDown: (e) => {
            if (e.code === 'Escape' && value.length > 0) {
                e.stopPropagation();
                onClear && onClear();
            }
        }, ...props },
        react_1.default.createElement(lsd_react_1.TextField, { className: SearchInput_module_scss_1.default.textField, value: value, placeholder: expanded || isMobile ? inputProps.placeholder : '', onChange: onChange, onFocus: onFocus, clearButton: true, icon: react_1.default.createElement(lsd_react_1.SearchIcon, { color: "primary" }), ...inputProps })));
};
exports.SearchInput = SearchInput;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvdGhlbWUvU2VhcmNoQmFyL1NlYXJjaElucHV0L1NlYXJjaElucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsb0RBQTREO0FBQzVELHdEQUF1QjtBQUN2QiwwREFBeUI7QUFDekIseUNBQW9DO0FBQ3BDLGdHQUE4QztBQWdCdkMsTUFBTSxXQUFXLEdBQStCLENBQUMsRUFDdEQsS0FBSyxHQUFHLEVBQUUsRUFDVixNQUFNLEVBQ04sUUFBUSxFQUNSLE9BQU8sRUFDUCxPQUFPLEVBQUUsZUFBZSxFQUN4QixRQUFRLEVBQ1IsU0FBUyxFQUNULFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxVQUFVLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsRUFDbEUsWUFBWSxFQUNaLEdBQUcsS0FBSyxFQUNULEVBQUUsRUFBRTtJQUNILE1BQU0sUUFBUSxHQUFHLElBQUEsb0JBQVEsRUFBQyxvQkFBb0IsQ0FBQyxDQUFBO0lBRS9DLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUU1QyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQXlDLEVBQUUsRUFBRTtRQUM1RCxlQUFlLElBQUksZUFBZSxFQUFFLENBQUE7SUFDdEMsQ0FBQyxDQUFBO0lBRUQsT0FBTyxDQUNMLHVDQUNFLEdBQUcsRUFBRSxZQUFZLEVBQ2pCLFNBQVMsRUFBRSxJQUFBLGNBQUksRUFBQyxpQ0FBTSxDQUFDLElBQUksRUFBRSxRQUFRLElBQUksaUNBQU0sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQ3BFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ2YsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDM0MsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFBO2dCQUNuQixPQUFPLElBQUksT0FBTyxFQUFFLENBQUE7YUFDckI7UUFDSCxDQUFDLEtBQ0csS0FBSztRQUVULDhCQUFDLHFCQUFTLElBQ1IsU0FBUyxFQUFFLGlDQUFNLENBQUMsU0FBUyxFQUMzQixLQUFLLEVBQUUsS0FBSyxFQUNaLFdBQVcsRUFBRSxRQUFRLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQy9ELFFBQVEsRUFBRSxRQUFRLEVBQ2xCLE9BQU8sRUFBRSxPQUFPLEVBQ2hCLFdBQVcsUUFDWCxJQUFJLEVBQUUsOEJBQUMsc0JBQVUsSUFBQyxLQUFLLEVBQUMsU0FBUyxHQUFHLEtBQy9CLFVBQWtCLEdBQ3ZCLENBQ0UsQ0FDUCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBNUNZLFFBQUEsV0FBVyxlQTRDdkIiLCJmaWxlIjoiY2xpZW50L3RoZW1lL1NlYXJjaEJhci9TZWFyY2hJbnB1dC9TZWFyY2hJbnB1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlYXJjaEljb24sIFRleHRGaWVsZCB9IGZyb20gJ0BhY2lkLWluZm8vbHNkLXJlYWN0J1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCdcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZU1lZGlhIH0gZnJvbSAncmVhY3QtdXNlJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1NlYXJjaElucHV0Lm1vZHVsZS5zY3NzJ1xuXG5leHBvcnQgdHlwZSBTZWFyY2hJbnB1dFByb3BzID0gT21pdDxcbiAgUmVhY3QuSFRNTFByb3BzPEhUTUxEaXZFbGVtZW50PixcbiAgJ3ZhbHVlJyB8ICdvbkNoYW5nZSdcbj4gJlxuICBQaWNrPFJlYWN0LkhUTUxQcm9wczxIVE1MSW5wdXRFbGVtZW50PiwgJ29uQ2hhbmdlJz4gJiB7XG4gICAgaW5wdXRQcm9wcz86IFJlYWN0LkhUTUxQcm9wczxIVE1MSW5wdXRFbGVtZW50PlxuICAgIGNvbnRhaW5lclJlZj86IFJlYWN0LlJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD5cbiAgICB2YWx1ZT86IHN0cmluZ1xuICAgIGFjdGl2ZT86IGJvb2xlYW5cbiAgICBvbkZvY3VzPzogKCkgPT4gdm9pZFxuICAgIG9uQ2FuY2VsPzogKCkgPT4gdm9pZFxuICAgIG9uQ2xlYXI/OiAoKSA9PiB2b2lkXG4gIH1cblxuZXhwb3J0IGNvbnN0IFNlYXJjaElucHV0OiBSZWFjdC5GQzxTZWFyY2hJbnB1dFByb3BzPiA9ICh7XG4gIHZhbHVlID0gJycsXG4gIGFjdGl2ZSxcbiAgb25DaGFuZ2UsXG4gIG9uQ2xlYXIsXG4gIG9uRm9jdXM6IG9uRm9jdXNDYWxsYmFjayxcbiAgb25DYW5jZWwsXG4gIGNsYXNzTmFtZSxcbiAgaW5wdXRQcm9wczogeyByZWY6IGlucHV0UmVmLCAuLi5pbnB1dFByb3BzIH0gPSB7IHBsYWNlaG9sZGVyOiAnJyB9LFxuICBjb250YWluZXJSZWYsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGlzTW9iaWxlID0gdXNlTWVkaWEoJyhtYXgtd2lkdGg6IDk5NnB4KScpXG5cbiAgY29uc3QgZXhwYW5kZWQgPSBhY3RpdmUgfHwgdmFsdWU/Lmxlbmd0aCA+IDBcblxuICBjb25zdCBvbkZvY3VzID0gKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgb25Gb2N1c0NhbGxiYWNrICYmIG9uRm9jdXNDYWxsYmFjaygpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHJlZj17Y29udGFpbmVyUmVmfVxuICAgICAgY2xhc3NOYW1lPXtjbHN4KHN0eWxlcy5yb290LCBleHBhbmRlZCAmJiBzdHlsZXMuZXhwYW5kZWQsIGNsYXNzTmFtZSl9XG4gICAgICBvbktleURvd249eyhlKSA9PiB7XG4gICAgICAgIGlmIChlLmNvZGUgPT09ICdFc2NhcGUnICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgb25DbGVhciAmJiBvbkNsZWFyKClcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICA8VGV4dEZpZWxkXG4gICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnRleHRGaWVsZH1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBwbGFjZWhvbGRlcj17ZXhwYW5kZWQgfHwgaXNNb2JpbGUgPyBpbnB1dFByb3BzLnBsYWNlaG9sZGVyIDogJyd9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgY2xlYXJCdXR0b25cbiAgICAgICAgaWNvbj17PFNlYXJjaEljb24gY29sb3I9XCJwcmltYXJ5XCIgLz59XG4gICAgICAgIHsuLi4oaW5wdXRQcm9wcyBhcyBhbnkpfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIl19
