"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchBar = void 0;
const tslib_1 = require("tslib");
const lsd_react_1 = require("@acid-info/lsd-react");
const react_1 = tslib_1.__importStar(require("react"));
const Modal_1 = require("../../components/Modal/Modal");
const usePersistedHistory_1 = require("../../lib/usePersistedHistory");
const useWindowEventListener_1 = require("../../lib/useWindowEventListener");
const useSearch_1 = require("./hooks/useSearch");
const SearchBar_module_scss_1 = tslib_1.__importDefault(require("./SearchBar.module.scss"));
const SearchHistory_1 = require("./SearchHistory/SearchHistory");
const SearchInput_1 = require("./SearchInput/SearchInput");
const SearchResults_1 = require("./SearchResults/SearchResults");
const SearchBar = ({}) => {
    const history = (0, usePersistedHistory_1.usePersistedHistory)('search', {
        unique: true,
        equals: (a, b) => a.title === b.title && a.href === b.href,
        maxItems: 10,
    });
    const search = (0, useSearch_1.useSearch)();
    const ref = (0, react_1.useRef)(null);
    const [input, setInput] = (0, react_1.useState)('');
    const [results, setResults] = (0, react_1.useState)([]);
    const [displayModal, setDisplayModal] = (0, react_1.useState)(false);
    const onInputChange = (e) => {
        setInput(e.target.value);
    };
    const focusOnInput = () => {
        const el = ref.current;
        if (!el)
            return;
        const inputEl = el.querySelector('input');
        if (inputEl)
            setTimeout(() => {
                inputEl.focus();
            }, 50);
    };
    const onClear = () => {
        setInput('');
    };
    const query = async (input) => {
        const { results } = await search.query(input);
        setResults(results);
    };
    (0, react_1.useEffect)(() => {
        if (input.length > 0)
            query(input);
        else
            setResults([]);
    }, [input]);
    (0, react_1.useEffect)(() => {
        displayModal ? focusOnInput() : setInput('');
    }, [displayModal]);
    const onNavigate = (e, item) => {
        e.preventDefault();
        setDisplayModal(false);
        history.add(item);
        window.location.href = item.href;
    };
    (0, useWindowEventListener_1.useWindowEventListener)('keydown', (event) => {
        if ((event.ctrlKey || event.metaKey) && event.code === 'KeyK') {
            event.preventDefault();
            setDisplayModal(true);
        }
    }, {}, []);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(lsd_react_1.IconButton, { onClick: () => setDisplayModal(true), size: "medium" },
            react_1.default.createElement(lsd_react_1.SearchIcon, null)),
        react_1.default.createElement(Modal_1.Modal, { keepMounted: true, id: "search-modal", open: displayModal, onClose: () => setDisplayModal(false), className: SearchBar_module_scss_1.default.modal },
            react_1.default.createElement("div", { className: SearchBar_module_scss_1.default.header },
                react_1.default.createElement(SearchInput_1.SearchInput, { containerRef: ref, onClear: onClear, value: input, onChange: onInputChange }),
                react_1.default.createElement(lsd_react_1.IconButton, { className: SearchBar_module_scss_1.default.closeButton, size: "medium", onClick: () => setDisplayModal(false) },
                    react_1.default.createElement(lsd_react_1.CloseIcon, { color: "primary" }))),
            input.length > 0 && (react_1.default.createElement(SearchResults_1.SearchResults, { results: results, onNavigate: onNavigate })),
            input.length === 0 && (react_1.default.createElement(SearchHistory_1.SearchHistory, { history: history.list ?? [], onRemove: history.removeByIndex, onClose: () => setDisplayModal(false) })))));
};
exports.SearchBar = SearchBar;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
