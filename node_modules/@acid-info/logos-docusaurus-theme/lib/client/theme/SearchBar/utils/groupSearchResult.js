"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupSearchResult = void 0;
const tslib_1 = require("tslib");
const groupBy_1 = tslib_1.__importDefault(require("lodash/groupBy"));
const omit_1 = tslib_1.__importDefault(require("lodash/omit"));
const types_1 = require("../types");
const convertSearchResult = (item) => {
    const { type, document, page, highlighted, score } = item;
    const { url, hash = '' } = document;
    const href = url + hash;
    switch (type) {
        case types_1.SearchDocumentType.Title: {
            return {
                type,
                url,
                hash,
                href,
                score,
                title: highlighted,
                content: '',
                category: document.breadcrumb?.[1] ?? document.title,
            };
        }
        case types_1.SearchDocumentType.Heading: {
            const p = page;
            return {
                type,
                url,
                hash,
                href,
                score,
                title: highlighted,
                content: '',
                category: p?.breadcrumb?.[1] ?? p?.title ?? '',
            };
        }
        case types_1.SearchDocumentType.Paragraph: {
            const p = page;
            return {
                type,
                url,
                hash,
                href,
                score,
                title: document.sectionTitle ?? '',
                content: highlighted,
                category: p?.breadcrumb?.[1] ?? p?.title ?? '',
            };
        }
    }
};
const groupSearchResult = (results) => Object.entries((0, groupBy_1.default)(results.map((item) => convertSearchResult(item)), 'category'))
    .map(([key, items]) => [
    key,
    items
        .map((item) => (0, omit_1.default)(item, 'category'))
        .sort((a, b) => (a.score > b.score ? -1 : 1)),
])
    .sort((a, b) => ((a[1][0]?.score ?? 0) > (b[1][0]?.score ?? 0) ? -1 : 1))
    .map(([category, items]) => [
    category,
    Object.entries((0, groupBy_1.default)(items, 'url'))
        .map(([url, items]) => [
        url,
        items.sort((a, b) => a.type === types_1.SearchDocumentType.Title
            ? -1
            : a.score > b.score
                ? -1
                : 1),
    ])
        .sort((a, b) => (a[1][0]?.score ?? 0) > (b[1][0]?.score ?? 0) ? -1 : 1)
        .flatMap(([url, items]) => items),
]);
exports.groupSearchResult = groupSearchResult;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvdGhlbWUvU2VhcmNoQmFyL3V0aWxzL2dyb3VwU2VhcmNoUmVzdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxxRUFBb0M7QUFDcEMsK0RBQThCO0FBQzlCLG9DQU9pQjtBQUVqQixNQUFNLG1CQUFtQixHQUFHLENBQzFCLElBQWtCLEVBQ2lCLEVBQUU7SUFDckMsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUE7SUFDekQsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEdBQUcsRUFBRSxFQUFFLEdBQUcsUUFBUSxDQUFBO0lBQ25DLE1BQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUE7SUFFdkIsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLDBCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdCLE9BQU87Z0JBQ0wsSUFBSTtnQkFDSixHQUFHO2dCQUNILElBQUk7Z0JBQ0osSUFBSTtnQkFDSixLQUFLO2dCQUNMLEtBQUssRUFBRSxXQUFXO2dCQUNsQixPQUFPLEVBQUUsRUFBRTtnQkFDWCxRQUFRLEVBQUUsUUFBUSxDQUFDLFVBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxLQUFLO2FBQ3RELENBQUE7U0FDRjtRQUVELEtBQUssMEJBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsSUFBNkIsQ0FBQTtZQUV2QyxPQUFPO2dCQUNMLElBQUk7Z0JBQ0osR0FBRztnQkFDSCxJQUFJO2dCQUNKLElBQUk7Z0JBQ0osS0FBSztnQkFDTCxLQUFLLEVBQUUsV0FBVztnQkFDbEIsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsUUFBUSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7YUFDL0MsQ0FB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QUUsQ0FBQyxLQUFLLENBQUM7Q0FDcEMsQ0FBQyxDQUFBO0FBdkNPLFFBQUEsaUJBQWlCLHFCQXVDeEIiLCJmaWxlIjoiY2xpZW50L3RoZW1lL1NlYXJjaEJhci91dGlscy9ncm91cFNlYXJjaFJlc3VsdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBncm91cEJ5IGZyb20gJ2xvZGFzaC9ncm91cEJ5J1xuaW1wb3J0IG9taXQgZnJvbSAnbG9kYXNoL29taXQnXG5pbXBvcnQge1xuICBHcm91cGVkU2VhcmNoUmVzdWx0LFxuICBTZWFyY2hEb2N1bWVudCxcbiAgU2VhcmNoRG9jdW1lbnRUeXBlLFxuICBTZWFyY2hSZXN1bHQsXG4gIFNlYXJjaFJlc3VsdEdyb3VwSXRlbSxcbiAgU2VhcmNoUmVzdWx0R3JvdXBJdGVtV2l0aENhdGVnb3J5LFxufSBmcm9tICcuLi90eXBlcydcblxuY29uc3QgY29udmVydFNlYXJjaFJlc3VsdCA9IChcbiAgaXRlbTogU2VhcmNoUmVzdWx0LFxuKTogU2VhcmNoUmVzdWx0R3JvdXBJdGVtV2l0aENhdGVnb3J5ID0+IHtcbiAgY29uc3QgeyB0eXBlLCBkb2N1bWVudCwgcGFnZSwgaGlnaGxpZ2h0ZWQsIHNjb3JlIH0gPSBpdGVtXG4gIGNvbnN0IHsgdXJsLCBoYXNoID0gJycgfSA9IGRvY3VtZW50XG4gIGNvbnN0IGhyZWYgPSB1cmwgKyBoYXNoXG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBTZWFyY2hEb2N1bWVudFR5cGUuVGl0bGU6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIHVybCxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgaHJlZixcbiAgICAgICAgc2NvcmUsXG4gICAgICAgIHRpdGxlOiBoaWdobGlnaHRlZCxcbiAgICAgICAgY29udGVudDogJycsXG4gICAgICAgIGNhdGVnb3J5OiBkb2N1bWVudC5icmVhZGNydW1iIT8uWzFdID8/IGRvY3VtZW50LnRpdGxlLFxuICAgICAgfVxuICAgIH1cblxuICAgIGNhc2UgU2VhcmNoRG9jdW1lbnRUeXBlLkhlYWRpbmc6IHtcbiAgICAgIGNvbnN0IHAgPSBwYWdlIGFzIGFueSBhcyBTZWFyY2hEb2N1bWVudFxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlLFxuICAgICAgICB1cmwsXG4gICAgICAgIGhhc2gsXG4gICAgICAgIGhyZWYsXG4gICAgICAgIHNjb3JlLFxuICAgICAgICB0aXRsZTogaGlnaGxpZ2h0ZWQsXG4gICAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgICBjYXRlZ29yeTogcD8uYnJlYWRjcnVtYj8uWzFdID8/IHA/LnRpdGxlID8/ICcnLFxuICAgICAgfVxuICAgIH1cblxuICAgIGNhc2UgU2VhcmNoRG9jdW1lbnRUeXBlLlBhcmFncmFwaDoge1xuICAgICAgY29uc3QgcCA9IHBhZ2UgYXMgYW55IGFzIFNlYXJjaERvY3VtZW50XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIHVybCxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgaHJlZixcbiAgICAgICAgc2NvcmUsXG4gICAgICAgIHRpdGxlOiBkb2N1bWVudC5zZWN0aW9uVGl0bGUgPz8gJycsXG4gICAgICAgIGNvbnRlbnQ6IGhpZ2hsaWdodGVkLFxuICAgICAgICBjYXRlZ29yeTogcD8uYnJlYWRjcnVtYj8uWzFdID8/IHA/LnRpdGxlID8/ICcnLFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZ3JvdXBTZWFyY2hSZXN1bHQgPSAoXG4gIHJlc3VsdHM6IFNlYXJjaFJlc3VsdFtdLFxuKTogR3JvdXBlZFNlYXJjaFJlc3VsdCA9PlxuICBPYmplY3QuZW50cmllcyhcbiAgICBncm91cEJ5KFxuICAgICAgcmVzdWx0cy5tYXAoKGl0ZW0pID0+IGNvbnZlcnRTZWFyY2hSZXN1bHQoaXRlbSkpLFxuICAgICAgJ2NhdGVnb3J5JyxcbiAgICApLFxuICApXG4gICAgLm1hcChcbiAgICAgIChba2V5LCBpdGVtc10pID0+XG4gICAgICAgIFtcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgaXRlbXNcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0pID0+IG9taXQoaXRlbSwgJ2NhdGVnb3J5JykpXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gKGEuc2NvcmUgPiBiLnNjb3JlID8gLTEgOiAxKSksXG4gICAgICAgIF0gYXMgW3N0cmluZywgU2VhcmNoUmVzdWx0R3JvdXBJdGVtW11dLFxuICAgIClcbiAgICAuc29ydCgoYSwgYikgPT4gKChhWzFdWzBdPy5zY29yZSA/PyAwKSA+IChiWzFdWzBdPy5zY29yZSA/PyAwKSA/IC0xIDogMSkpXG4gICAgLm1hcCgoW2NhdGVnb3J5LCBpdGVtc10pID0+IFtcbiAgICAgIGNhdGVnb3J5LFxuICAgICAgT2JqZWN0LmVudHJpZXMoZ3JvdXBCeShpdGVtcywgJ3VybCcpKVxuICAgICAgICAubWFwKFxuICAgICAgICAgIChbdXJsLCBpdGVtc10pID0+XG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgaXRlbXMuc29ydCgoYSwgYikgPT5cbiAgICAgICAgICAgICAgICBhLnR5cGUgPT09IFNlYXJjaERvY3VtZW50VHlwZS5UaXRsZVxuICAgICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgICAgOiBhLnNjb3JlID4gYi5zY29yZVxuICAgICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgICAgOiAxLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSBhcyBbc3RyaW5nLCBTZWFyY2hSZXN1bHRHcm91cEl0ZW1bXV0sXG4gICAgICAgIClcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+XG4gICAgICAgICAgKGFbMV1bMF0/LnNjb3JlID8/IDApID4gKGJbMV1bMF0/LnNjb3JlID8/IDApID8gLTEgOiAxLFxuICAgICAgICApXG4gICAgICAgIC5mbGF0TWFwKChbdXJsLCBpdGVtc10pID0+IGl0ZW1zKSxcbiAgICBdKVxuIl19
