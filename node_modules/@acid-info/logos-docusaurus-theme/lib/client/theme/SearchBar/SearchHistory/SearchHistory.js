"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchHistory = void 0;
const tslib_1 = require("tslib");
const lsd_react_1 = require("@acid-info/lsd-react");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = tslib_1.__importDefault(require("react"));
const Icon_1 = require("../../../components/Icon/Icon");
const SearchResultMessage_1 = require("../SearchResultMessage/SearchResultMessage");
const SearchHistory_module_scss_1 = tslib_1.__importDefault(require("./SearchHistory.module.scss"));
const SearchHistory = ({ history: list = [], onRemove, onClose, className, children, ...props }) => {
    return (react_1.default.createElement("div", { className: (0, clsx_1.default)(className, SearchHistory_module_scss_1.default.root, list.length === 0 && SearchHistory_module_scss_1.default.empty), ...props }, list.length === 0 ? (react_1.default.createElement(SearchResultMessage_1.SearchResultMessage, null, "No recent searches")) : (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(lsd_react_1.Typography, { className: SearchHistory_module_scss_1.default.title, variant: "subtitle2", component: "div" }, "Recent"),
        list.map((item, index) => (react_1.default.createElement("div", { key: index, className: SearchHistory_module_scss_1.default.item },
            react_1.default.createElement(Icon_1.IconHistory, null),
            react_1.default.createElement(lsd_react_1.Typography, { variant: "subtitle2", component: "a", href: item.href, className: SearchHistory_module_scss_1.default.itemTitle, dangerouslySetInnerHTML: { __html: item.title }, onClick: () => onClose && onClose() }),
            react_1.default.createElement("button", { className: "clean-btn", onClick: () => onRemove(index) },
                react_1.default.createElement(Icon_1.IconClose, null)))))))));
};
exports.SearchHistory = SearchHistory;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvdGhlbWUvU2VhcmNoQmFyL1NlYXJjaEhpc3RvcnkvU2VhcmNoSGlzdG9yeS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG9EQUFpRDtBQUNqRCx3REFBdUI7QUFDdkIsMERBQXlCO0FBQ3pCLHdEQUFzRTtBQUN0RSxvRkFBZ0Y7QUFFaEYsb0dBQWdEO0FBUXpDLE1BQU0sYUFBYSxHQUFpQyxDQUFDLEVBQzFELE9BQU8sRUFBRSxJQUFJLEdBQUcsRUFBRSxFQUNsQixRQUFRLEVBQ1IsT0FBTyxFQUNQLFNBQVMsRUFDVCxRQUFRLEVBQ1IsR0FBRyxLQUFLLEVBQ1QsRUFBRSxFQUFFO0lBQ0gsT0FBTyxDQUNMLHVDQUNFLFNBQVMsRUFBRSxJQUFBLGNBQUksRUFDYixTQUFTLEVBQ1QsbUNBQU0sQ0FBQyxJQUFJLEVBQ1gsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksbUNBQU0sQ0FBQyxLQUFLLENBQ2xDLEtBQ0csS0FBSyxJQUVSLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNuQiw4QkFBQyx5Q0FBbUIsNkJBQXlDLENBQzlELENBQUMsQ0FBQyxDQUFDLENBQ0Y7UUFDRSw4QkFBQyxzQkFBVSxJQUNULFNBQVMsRUFBRSxtQ0FBTSxDQUFDLEtBQUssRUFDdkIsT0FBTyxFQUFDLFdBQVcsRUFDbkIsU0FBUyxFQUFDLEtBQUssYUFHSjtRQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUN6Qix1Q0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxtQ0FBTSxDQUFDLElBQUk7WUFDckMsOEJBQUMsa0JBQVcsT0FBRztZQUNmLDhCQUFDLHNCQUFVLElBQ1QsT0FBTyxFQUFDLFdBQVcsRUFDbkIsU0FBUyxFQUFDLEdBQUcsRUFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFDZixTQUFTLEVBQUUsbUNBQU0sQ0FBQyxTQUFTLEVBQzNCLHVCQUF1QixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFDL0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLEVBQUUsR0FDbkM7WUFDRiwwQ0FBUSxTQUFTLEVBQUMsV0FBVyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO2dCQUMxRCw4QkFBQyxnQkFBUyxPQUFHLENBQ04sQ0FDTCxDQUNQLENBQUMsQ0FDRCxDQUNKLENBQ0csQ0FDUCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBaERZLFFBQUEsYUFBYSxpQkFnRHpCIiwiZmlsZSI6ImNsaWVudC90aGVtZS9TZWFyY2hCYXIvU2VhcmNoSGlzdG9yeS9TZWFyY2hIaXN0b3J5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwb2dyYXBoeSB9IGZyb20gJ0BhY2lkLWluZm8vbHNkLXJlYWN0J1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCdcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEljb25DbG9zZSwgSWNvbkhpc3RvcnkgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL0ljb24vSWNvbidcbmltcG9ydCB7IFNlYXJjaFJlc3VsdE1lc3NhZ2UgfSBmcm9tICcuLi9TZWFyY2hSZXN1bHRNZXNzYWdlL1NlYXJjaFJlc3VsdE1lc3NhZ2UnXG5pbXBvcnQgeyBTZWFyY2hSZXN1bHRHcm91cEl0ZW0gfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9TZWFyY2hIaXN0b3J5Lm1vZHVsZS5zY3NzJ1xuXG5leHBvcnQgdHlwZSBTZWFyY2hIaXN0b3J5UHJvcHMgPSBSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+ICYge1xuICBoaXN0b3J5OiBTZWFyY2hSZXN1bHRHcm91cEl0ZW1bXVxuICBvblJlbW92ZTogKGluZGV4OiBudW1iZXIpID0+IHZvaWRcbiAgb25DbG9zZT86ICgpID0+IHZvaWRcbn1cblxuZXhwb3J0IGNvbnN0IFNlYXJjaEhpc3Rvcnk6IFJlYWN0LkZDPFNlYXJjaEhpc3RvcnlQcm9wcz4gPSAoe1xuICBoaXN0b3J5OiBsaXN0ID0gW10sXG4gIG9uUmVtb3ZlLFxuICBvbkNsb3NlLFxuICBjbGFzc05hbWUsXG4gIGNoaWxkcmVuLFxuICAuLi5wcm9wc1xufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZXMucm9vdCxcbiAgICAgICAgbGlzdC5sZW5ndGggPT09IDAgJiYgc3R5bGVzLmVtcHR5LFxuICAgICAgKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICB7bGlzdC5sZW5ndGggPT09IDAgPyAoXG4gICAgICAgIDxTZWFyY2hSZXN1bHRNZXNzYWdlPk5vIHJlY2VudCBzZWFyY2hlczwvU2VhcmNoUmVzdWx0TWVzc2FnZT5cbiAgICAgICkgOiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnRpdGxlfVxuICAgICAgICAgICAgdmFyaWFudD1cInN1YnRpdGxlMlwiXG4gICAgICAgICAgICBjb21wb25lbnQ9XCJkaXZcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIFJlY2VudFxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICB7bGlzdC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT17c3R5bGVzLml0ZW19PlxuICAgICAgICAgICAgICA8SWNvbkhpc3RvcnkgLz5cbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgICB2YXJpYW50PVwic3VidGl0bGUyXCJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJhXCJcbiAgICAgICAgICAgICAgICBocmVmPXtpdGVtLmhyZWZ9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuaXRlbVRpdGxlfVxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogaXRlbS50aXRsZSB9fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2xvc2UgJiYgb25DbG9zZSgpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImNsZWFuLWJ0blwiIG9uQ2xpY2s9eygpID0+IG9uUmVtb3ZlKGluZGV4KX0+XG4gICAgICAgICAgICAgICAgPEljb25DbG9zZSAvPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkpfVxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIClcbn1cbiJdfQ==
