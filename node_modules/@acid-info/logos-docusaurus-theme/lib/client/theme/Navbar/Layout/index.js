"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const theme_common_1 = require("@docusaurus/theme-common");
const internal_1 = require("@docusaurus/theme-common/internal");
const Translate_1 = require("@docusaurus/Translate");
const MobileSidebar_1 = tslib_1.__importDefault(require("@theme/Navbar/MobileSidebar"));
const styles_module_css_1 = tslib_1.__importDefault(require("./styles.module.css"));
function NavbarBackdrop(props) {
    return (react_1.default.createElement("div", { role: "presentation", ...props, className: (0, clsx_1.default)('navbar-sidebar__backdrop', props.className) }));
}
function NavbarLayout({ children }) {
    const { navbar: { hideOnScroll, style }, } = (0, theme_common_1.useThemeConfig)();
    const mobileSidebar = (0, internal_1.useNavbarMobileSidebar)();
    const { navbarRef, isNavbarVisible } = (0, internal_1.useHideableNavbar)(hideOnScroll);
    return (react_1.default.createElement("nav", { ref: navbarRef, "aria-label": (0, Translate_1.translate)({
            id: 'theme.NavBar.navAriaLabel',
            message: 'Main',
            description: 'The ARIA label for the main navigation',
        }), className: (0, clsx_1.default)('navbar', 'navbar--fixed-top', hideOnScroll && [
            styles_module_css_1.default.navbarHideable,
            !isNavbarVisible && styles_module_css_1.default.navbarHidden,
        ], {
            'navbar--dark': style === 'dark',
            'navbar--primary': style === 'primary',
            'navbar-sidebar--show': mobileSidebar.shown,
        }) },
        children,
        react_1.default.createElement(NavbarBackdrop, { onClick: mobileSidebar.toggle }),
        react_1.default.createElement(MobileSidebar_1.default, null)));
}
exports.default = NavbarLayout;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvdGhlbWUvTmF2YmFyL0xheW91dC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXlCO0FBQ3pCLHdEQUF1QjtBQUN2QiwyREFBeUQ7QUFDekQsZ0VBRzBDO0FBQzFDLHFEQUFpRDtBQUNqRCx3RkFBNkQ7QUFDN0Qsb0ZBQXdDO0FBRXhDLFNBQVMsY0FBYyxDQUFDLEtBQUs7SUFDM0IsT0FBTyxDQUNMLHVDQUNFLElBQUksRUFBQyxjQUFjLEtBQ2YsS0FBSyxFQUNULFNBQVMsRUFBRSxJQUFBLGNBQUksRUFBQywwQkFBMEIsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQzVELENBQ0gsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUF3QixZQUFZLENBQUMsRUFBRSxRQUFRLEVBQUU7SUFDL0MsTUFBTSxFQUNKLE1BQU0sRUFBRSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsR0FDaEMsR0FBRyxJQUFBLDZCQUFjLEdBQUUsQ0FBQTtJQUNwQixNQUFNLGFBQWEsR0FBRyxJQUFBLGlDQUFzQixHQUFFLENBQUE7SUFDOUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsR0FBRyxJQUFBLDRCQUFpQixFQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3RFLE9BQU8sQ0FDTCx1Q0FDRSxHQUFHLEVBQUUsU0FBUyxnQkFDRixJQUFBLHFCQUFTLEVBQUM7WUFDcEIsRUFBRSxFQUFFLDJCQUEyQjtZQUMvQixPQUFPLEVBQUUsTUFBTTtZQUNmLFdBQVcsRUFBRSx3Q0FBd0M7U0FDdEQsQ0FBQyxFQUNGLFNBQVMsRUFBRSxJQUFBLGNBQUksRUFDYixRQUFRLEVBQ1IsbUJBQW1CLEVBQ25CLFlBQVksSUFBSTtZQUNkLDJCQUFNLENBQUMsY0FBYztZQUNyQixDQUFDLGVBQWUsSUFBSSwyQkFBTSxDQUFDLFlBQVk7U0FDeEMsRUFDRDtZQUNFLGNBQWMsRUFBRSxLQUFLLEtBQUssTUFBTTtZQUNoQyxpQkFBaUIsRUFBRSxLQUFLLEtBQUssU0FBUztZQUN0QyxzQkFBc0IsRUFBRSxhQUFhLENBQUMsS0FBSztTQUM1QyxDQUNGO1FBRUEsUUFBUTtRQUNULDhCQUFDLGNBQWMsSUFBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sR0FBSTtRQUNqRCw4QkFBQyx1QkFBbUIsT0FBRyxDQUNuQixDQUNQLENBQUE7QUFDSCxDQUFDO0FBakNELCtCQWlDQyIsImZpbGUiOiJjbGllbnQvdGhlbWUvTmF2YmFyL0xheW91dC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnXG5pbXBvcnQgeyB1c2VUaGVtZUNvbmZpZyB9IGZyb20gJ0Bkb2N1c2F1cnVzL3RoZW1lLWNvbW1vbidcbmltcG9ydCB7XG4gIHVzZUhpZGVhYmxlTmF2YmFyLFxuICB1c2VOYXZiYXJNb2JpbGVTaWRlYmFyLFxufSBmcm9tICdAZG9jdXNhdXJ1cy90aGVtZS1jb21tb24vaW50ZXJuYWwnXG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdAZG9jdXNhdXJ1cy9UcmFuc2xhdGUnXG5pbXBvcnQgTmF2YmFyTW9iaWxlU2lkZWJhciBmcm9tICdAdGhlbWUvTmF2YmFyL01vYmlsZVNpZGViYXInXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIE5hdmJhckJhY2tkcm9wKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBjbGFzc05hbWU9e2Nsc3goJ25hdmJhci1zaWRlYmFyX19iYWNrZHJvcCcsIHByb3BzLmNsYXNzTmFtZSl9XG4gICAgLz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOYXZiYXJMYXlvdXQoeyBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IHtcbiAgICBuYXZiYXI6IHsgaGlkZU9uU2Nyb2xsLCBzdHlsZSB9LFxuICB9ID0gdXNlVGhlbWVDb25maWcoKVxuICBjb25zdCBtb2JpbGVTaWRlYmFyID0gdXNlTmF2YmFyTW9iaWxlU2lkZWJhcigpXG4gIGNvbnN0IHsgbmF2YmFyUmVmLCBpc05hdmJhclZpc2libGUgfSA9IHVzZUhpZGVhYmxlTmF2YmFyKGhpZGVPblNjcm9sbClcbiAgcmV0dXJuIChcbiAgICA8bmF2XG4gICAgICByZWY9e25hdmJhclJlZn1cbiAgICAgIGFyaWEtbGFiZWw9e3RyYW5zbGF0ZSh7XG4gICAgICAgIGlkOiAndGhlbWUuTmF2QmFyLm5hdkFyaWFMYWJlbCcsXG4gICAgICAgIG1lc3NhZ2U6ICdNYWluJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgQVJJQSBsYWJlbCBmb3IgdGhlIG1haW4gbmF2aWdhdGlvbicsXG4gICAgICB9KX1cbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgJ25hdmJhcicsXG4gICAgICAgICduYXZiYXItLWZpeGVkLXRvcCcsXG4gICAgICAgIGhpZGVPblNjcm9sbCAmJiBbXG4gICAgICAgICAgc3R5bGVzLm5hdmJhckhpZGVhYmxlLFxuICAgICAgICAgICFpc05hdmJhclZpc2libGUgJiYgc3R5bGVzLm5hdmJhckhpZGRlbixcbiAgICAgICAgXSxcbiAgICAgICAge1xuICAgICAgICAgICduYXZiYXItLWRhcmsnOiBzdHlsZSA9PT0gJ2RhcmsnLFxuICAgICAgICAgICduYXZiYXItLXByaW1hcnknOiBzdHlsZSA9PT0gJ3ByaW1hcnknLFxuICAgICAgICAgICduYXZiYXItc2lkZWJhci0tc2hvdyc6IG1vYmlsZVNpZGViYXIuc2hvd24sXG4gICAgICAgIH0sXG4gICAgICApfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDxOYXZiYXJCYWNrZHJvcCBvbkNsaWNrPXttb2JpbGVTaWRlYmFyLnRvZ2dsZX0gLz5cbiAgICAgIDxOYXZiYXJNb2JpbGVTaWRlYmFyIC8+XG4gICAgPC9uYXY+XG4gIClcbn1cbiJdfQ==
