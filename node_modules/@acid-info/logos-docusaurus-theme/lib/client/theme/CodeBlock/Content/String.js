"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const theme_common_1 = require("@docusaurus/theme-common");
const internal_1 = require("@docusaurus/theme-common/internal");
const prism_react_renderer_1 = tslib_1.__importStar(require("prism-react-renderer"));
const Line_1 = tslib_1.__importDefault(require("@theme/CodeBlock/Line"));
const CopyButton_1 = tslib_1.__importDefault(require("@theme/CodeBlock/CopyButton"));
const WordWrapButton_1 = tslib_1.__importDefault(require("@theme/CodeBlock/WordWrapButton"));
const Container_1 = tslib_1.__importDefault(require("../../../theme/CodeBlock/Container"));
const styles_module_css_1 = tslib_1.__importDefault(require("./styles.module.css"));
const lsd_react_1 = require("@acid-info/lsd-react");
function CodeBlockString({ children, className: blockClassName = '', metastring, title: titleProp, showLineNumbers: showLineNumbersProp, language: languageProp, }) {
    const { prism: { defaultLanguage, magicComments }, } = (0, theme_common_1.useThemeConfig)();
    const language = languageProp ?? (0, internal_1.parseLanguage)(blockClassName) ?? defaultLanguage;
    const prismTheme = (0, theme_common_1.usePrismTheme)();
    const wordWrap = (0, internal_1.useCodeWordWrap)();
    // We still parse the metastring in case we want to support more syntax in the
    // future. Note that MDX doesn't strip quotes when parsing metastring:
    // "title=\"xyz\"" => title: "\"xyz\""
    const title = (0, internal_1.parseCodeBlockTitle)(metastring) || titleProp;
    const { lineClassNames, code } = (0, internal_1.parseLines)(children, {
        metastring,
        language,
        magicComments,
    });
    const showLineNumbers = showLineNumbersProp ?? (0, internal_1.containsLineNumbers)(metastring);
    return (react_1.default.createElement(Container_1.default, { as: "div", className: (0, clsx_1.default)(blockClassName, language &&
            !blockClassName.includes(`language-${language}`) &&
            `language-${language}`) },
        title && (react_1.default.createElement("div", { className: styles_module_css_1.default.codeBlockTitle },
            react_1.default.createElement(lsd_react_1.Typography, { variant: "subtitle1" }, title))),
        react_1.default.createElement("div", { className: styles_module_css_1.default.codeBlockContent },
            react_1.default.createElement(prism_react_renderer_1.default, { ...prism_react_renderer_1.defaultProps, theme: prismTheme, code: code, language: (language ?? 'text') }, ({ className, tokens, getLineProps, getTokenProps }) => (react_1.default.createElement("pre", { 
                /* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */
                tabIndex: 0, ref: wordWrap.codeBlockRef, className: (0, clsx_1.default)(className, styles_module_css_1.default.codeBlock, 'thin-scrollbar') },
                react_1.default.createElement("code", { className: (0, clsx_1.default)(styles_module_css_1.default.codeBlockLines, showLineNumbers && styles_module_css_1.default.codeBlockLinesWithNumbering) }, tokens.map((line, i) => (react_1.default.createElement(Line_1.default, { key: i, line: line, getLineProps: getLineProps, getTokenProps: getTokenProps, classNames: lineClassNames[i], showLineNumbers: showLineNumbers }))))))),
            react_1.default.createElement("div", { className: styles_module_css_1.default.buttonGroup },
                (wordWrap.isEnabled || wordWrap.isCodeScrollable) && (react_1.default.createElement(WordWrapButton_1.default, { className: styles_module_css_1.default.codeButton, onClick: () => wordWrap.toggle(), isEnabled: wordWrap.isEnabled })),
                react_1.default.createElement(CopyButton_1.default, { className: styles_module_css_1.default.codeButton, code: code })))));
}
exports.default = CodeBlockString;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvdGhlbWUvQ29kZUJsb2NrL0NvbnRlbnQvU3RyaW5nLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBeUI7QUFDekIsd0RBQXVCO0FBQ3ZCLDJEQUF3RTtBQUN4RSxnRUFNMEM7QUFDMUMscUZBQTZFO0FBQzdFLHlFQUF3QztBQUN4QyxxRkFBb0Q7QUFDcEQsNkZBQTREO0FBQzVELCtGQUE4RDtBQUc5RCxvRkFBd0M7QUFDeEMsb0RBQWlEO0FBRWpELFNBQXdCLGVBQWUsQ0FBQyxFQUN0QyxRQUFRLEVBQ1IsU0FBUyxFQUFFLGNBQWMsR0FBRyxFQUFFLEVBQzlCLFVBQVUsRUFDVixLQUFLLEVBQUUsU0FBUyxFQUNoQixlQUFlLEVBQUUsbUJBQW1CLEVBQ3BDLFFBQVEsRUFBRSxZQUFZLEdBQ2hCO0lBQ04sTUFBTSxFQUNKLEtBQUssRUFBRSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsR0FDMUMsR0FBRyxJQUFBLDZCQUFjLEdBQUUsQ0FBQTtJQUNwQixNQUFNLFFBQVEsR0FDWixZQUFZLElBQUksSUFBQSx3QkFBYSxFQUFDLGNBQWMsQ0FBQyxJQUFJLGVBQWUsQ0FBQTtJQUNsRSxNQUFNLFVBQVUsR0FBRyxJQUFBLDRCQUFhLEdBQUUsQ0FBQTtJQUNsQyxNQUFNLFFBQVEsR0FBRyxJQUFBLDBCQUFlLEdBQUUsQ0FBQTtJQUVsQyw4RUFBOEU7SUFDOUUsc0VBQXNFO0lBQ3RFLHNDQUFzQztJQUN0QyxNQUFNLEtBQUssR0FBRyxJQUFBLDhCQUFtQixFQUFDLFVBQVUsQ0FBQyxJQUFJLFNBQVMsQ0FBQTtJQUUxRCxNQUFNLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUEscUJBQVUsRUFBQyxRQUFRLEVBQUU7UUFDcEQsVUFBVTtRQUNWLFFBQVE7UUFDUixhQUFhO0tBQ2QsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxlQUFlLEdBQUcsbUJBQW1CLElBQUksSUFBQSw4QkFBbUIsRUFBQyxVQUFVLENBQUMsQ0FBQTtJQUU5RSxPQUFPLENBQ0wsOEJBQUMsbUJBQVMsSUFDUixFQUFFLEVBQUMsS0FBSyxFQUNSLFNBQVMsRUFBRSxJQUFBLGNBQUksRUFDYixjQUFjLEVBQ2QsUUFBUTtZQUNOLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxZQUFZLFFBQVEsRUFBRSxDQUFDO1lBQ2hELFlBQVksUUFBUSxFQUFFLENBQ3pCO1FBRUEsS0FBSyxJQUFJLENBQ1IsdUNBQUssU0FBUyxFQUFFLDJCQUFNLENBQUMsY0FBYztZQUNuQyw4QkFBQyxzQkFBVSxJQUFDLE9BQU8sRUFBQyxXQUFXLElBQUUsS0FBSyxDQUFjLENBQ2hELENBQ1A7UUFDRCx1Q0FBSyxTQUFTLEVBQUUsMkJBQU0sQ0FBQyxnQkFBZ0I7WUFDckMsOEJBQUMsOEJBQVMsT0FDSixtQ0FBWSxFQUNoQixLQUFLLEVBQUUsVUFBVSxFQUNqQixJQUFJLEVBQUUsSUFBSSxFQUNWLFFBQVEsRUFBRSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQWEsSUFFekMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUN2RDtnQkFDRSxrRUFBa0U7Z0JBQ2xFLFFBQVEsRUFBRSxDQUFDLEVBQ1gsR0FBRyxFQUFFLFFBQVEsQ0FBQyxZQUFZLEVBQzFCLFNBQVMsRUFBRSxJQUFBLGNBQUksRUFBQyxTQUFTLEVBQUUsMkJBQU0sQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUM7Z0JBRTlELHdDQUNFLFNBQVMsRUFBRSxJQUFBLGNBQUksRUFDYiwyQkFBTSxDQUFDLGNBQWMsRUFDckIsZUFBZSxJQUFJLDJCQUFNLENBQUMsMkJBQTJCLENBQ3RELElBRUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ3ZCLDhCQUFDLGNBQUksSUFDSCxHQUFHLEVBQUUsQ0FBQyxFQUNOLElBQUksRUFBRSxJQUFJLEVBQ1YsWUFBWSxFQUFFLFlBQVksRUFDMUIsYUFBYSxFQUFFLGFBQWEsRUFDNUIsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFDN0IsZUFBZSxFQUFFLGVBQWUsR0FDaEMsQ0FDSCxDQUFDLENBQ0csQ0FDSCxDQUNQLENBQ1M7WUFDWix1Q0FBSyxTQUFTLEVBQUUsMkJBQU0sQ0FBQyxXQUFXO2dCQUMvQixDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FDcEQsOEJBQUMsd0JBQWMsSUFDYixTQUFTLEVBQUUsMkJBQU0sQ0FBQyxVQUFVLEVBQzVCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQ2hDLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUyxHQUM3QixDQUNIO2dCQUNELDhCQUFDLG9CQUFVLElBQUMsU0FBUyxFQUFFLDJCQUFNLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLEdBQUksQ0FDcEQsQ0FDRixDQUNJLENBQ2IsQ0FBQTtBQUNILENBQUM7QUExRkQsa0NBMEZDIiwiZmlsZSI6ImNsaWVudC90aGVtZS9Db2RlQmxvY2svQ29udGVudC9TdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4J1xuaW1wb3J0IHsgdXNlVGhlbWVDb25maWcsIHVzZVByaXNtVGhlbWUgfSBmcm9tICdAZG9jdXNhdXJ1cy90aGVtZS1jb21tb24nXG5pbXBvcnQge1xuICBwYXJzZUNvZGVCbG9ja1RpdGxlLFxuICBwYXJzZUxhbmd1YWdlLFxuICBwYXJzZUxpbmVzLFxuICBjb250YWluc0xpbmVOdW1iZXJzLFxuICB1c2VDb2RlV29yZFdyYXAsXG59IGZyb20gJ0Bkb2N1c2F1cnVzL3RoZW1lLWNvbW1vbi9pbnRlcm5hbCdcbmltcG9ydCBIaWdobGlnaHQsIHsgZGVmYXVsdFByb3BzLCB0eXBlIExhbmd1YWdlIH0gZnJvbSAncHJpc20tcmVhY3QtcmVuZGVyZXInXG5pbXBvcnQgTGluZSBmcm9tICdAdGhlbWUvQ29kZUJsb2NrL0xpbmUnXG5pbXBvcnQgQ29weUJ1dHRvbiBmcm9tICdAdGhlbWUvQ29kZUJsb2NrL0NvcHlCdXR0b24nXG5pbXBvcnQgV29yZFdyYXBCdXR0b24gZnJvbSAnQHRoZW1lL0NvZGVCbG9jay9Xb3JkV3JhcEJ1dHRvbidcbmltcG9ydCBDb250YWluZXIgZnJvbSAnQGxvZ29zLXRoZW1lL3RoZW1lL0NvZGVCbG9jay9Db250YWluZXInXG5pbXBvcnQgdHlwZSB7IFByb3BzIH0gZnJvbSAnQHRoZW1lL0NvZGVCbG9jay9Db250ZW50L1N0cmluZydcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgVHlwb2dyYXBoeSB9IGZyb20gJ0BhY2lkLWluZm8vbHNkLXJlYWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb2RlQmxvY2tTdHJpbmcoe1xuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lOiBibG9ja0NsYXNzTmFtZSA9ICcnLFxuICBtZXRhc3RyaW5nLFxuICB0aXRsZTogdGl0bGVQcm9wLFxuICBzaG93TGluZU51bWJlcnM6IHNob3dMaW5lTnVtYmVyc1Byb3AsXG4gIGxhbmd1YWdlOiBsYW5ndWFnZVByb3AsXG59OiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3Qge1xuICAgIHByaXNtOiB7IGRlZmF1bHRMYW5ndWFnZSwgbWFnaWNDb21tZW50cyB9LFxuICB9ID0gdXNlVGhlbWVDb25maWcoKVxuICBjb25zdCBsYW5ndWFnZSA9XG4gICAgbGFuZ3VhZ2VQcm9wID8/IHBhcnNlTGFuZ3VhZ2UoYmxvY2tDbGFzc05hbWUpID8/IGRlZmF1bHRMYW5ndWFnZVxuICBjb25zdCBwcmlzbVRoZW1lID0gdXNlUHJpc21UaGVtZSgpXG4gIGNvbnN0IHdvcmRXcmFwID0gdXNlQ29kZVdvcmRXcmFwKClcblxuICAvLyBXZSBzdGlsbCBwYXJzZSB0aGUgbWV0YXN0cmluZyBpbiBjYXNlIHdlIHdhbnQgdG8gc3VwcG9ydCBtb3JlIHN5bnRheCBpbiB0aGVcbiAgLy8gZnV0dXJlLiBOb3RlIHRoYXQgTURYIGRvZXNuJ3Qgc3RyaXAgcXVvdGVzIHdoZW4gcGFyc2luZyBtZXRhc3RyaW5nOlxuICAvLyBcInRpdGxlPVxcXCJ4eXpcXFwiXCIgPT4gdGl0bGU6IFwiXFxcInh5elxcXCJcIlxuICBjb25zdCB0aXRsZSA9IHBhcnNlQ29kZUJsb2NrVGl0bGUobWV0YXN0cmluZykgfHwgdGl0bGVQcm9wXG5cbiAgY29uc3QgeyBsaW5lQ2xhc3NOYW1lcywgY29kZSB9ID0gcGFyc2VMaW5lcyhjaGlsZHJlbiwge1xuICAgIG1ldGFzdHJpbmcsXG4gICAgbGFuZ3VhZ2UsXG4gICAgbWFnaWNDb21tZW50cyxcbiAgfSlcbiAgY29uc3Qgc2hvd0xpbmVOdW1iZXJzID0gc2hvd0xpbmVOdW1iZXJzUHJvcCA/PyBjb250YWluc0xpbmVOdW1iZXJzKG1ldGFzdHJpbmcpXG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyXG4gICAgICBhcz1cImRpdlwiXG4gICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgIGJsb2NrQ2xhc3NOYW1lLFxuICAgICAgICBsYW5ndWFnZSAmJlxuICAgICAgICAgICFibG9ja0NsYXNzTmFtZS5pbmNsdWRlcyhgbGFuZ3VhZ2UtJHtsYW5ndWFnZX1gKSAmJlxuICAgICAgICAgIGBsYW5ndWFnZS0ke2xhbmd1YWdlfWAsXG4gICAgICApfVxuICAgID5cbiAgICAgIHt0aXRsZSAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29kZUJsb2NrVGl0bGV9PlxuICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIj57dGl0bGV9PC9UeXBvZ3JhcGh5PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvZGVCbG9ja0NvbnRlbnR9PlxuICAgICAgICA8SGlnaGxpZ2h0XG4gICAgICAgICAgey4uLmRlZmF1bHRQcm9wc31cbiAgICAgICAgICB0aGVtZT17cHJpc21UaGVtZX1cbiAgICAgICAgICBjb2RlPXtjb2RlfVxuICAgICAgICAgIGxhbmd1YWdlPXsobGFuZ3VhZ2UgPz8gJ3RleHQnKSBhcyBMYW5ndWFnZX1cbiAgICAgICAgPlxuICAgICAgICAgIHsoeyBjbGFzc05hbWUsIHRva2VucywgZ2V0TGluZVByb3BzLCBnZXRUb2tlblByb3BzIH0pID0+IChcbiAgICAgICAgICAgIDxwcmVcbiAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLXRhYmluZGV4ICovXG4gICAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgICAgICByZWY9e3dvcmRXcmFwLmNvZGVCbG9ja1JlZn1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzTmFtZSwgc3R5bGVzLmNvZGVCbG9jaywgJ3RoaW4tc2Nyb2xsYmFyJyl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxjb2RlXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgICAgICAgICAgc3R5bGVzLmNvZGVCbG9ja0xpbmVzLFxuICAgICAgICAgICAgICAgICAgc2hvd0xpbmVOdW1iZXJzICYmIHN0eWxlcy5jb2RlQmxvY2tMaW5lc1dpdGhOdW1iZXJpbmcsXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0b2tlbnMubWFwKChsaW5lLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgICA8TGluZVxuICAgICAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgICAgIGxpbmU9e2xpbmV9XG4gICAgICAgICAgICAgICAgICAgIGdldExpbmVQcm9wcz17Z2V0TGluZVByb3BzfVxuICAgICAgICAgICAgICAgICAgICBnZXRUb2tlblByb3BzPXtnZXRUb2tlblByb3BzfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWVzPXtsaW5lQ2xhc3NOYW1lc1tpXX1cbiAgICAgICAgICAgICAgICAgICAgc2hvd0xpbmVOdW1iZXJzPXtzaG93TGluZU51bWJlcnN9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L2NvZGU+XG4gICAgICAgICAgICA8L3ByZT5cbiAgICAgICAgICApfVxuICAgICAgICA8L0hpZ2hsaWdodD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5idXR0b25Hcm91cH0+XG4gICAgICAgICAgeyh3b3JkV3JhcC5pc0VuYWJsZWQgfHwgd29yZFdyYXAuaXNDb2RlU2Nyb2xsYWJsZSkgJiYgKFxuICAgICAgICAgICAgPFdvcmRXcmFwQnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmNvZGVCdXR0b259XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHdvcmRXcmFwLnRvZ2dsZSgpfVxuICAgICAgICAgICAgICBpc0VuYWJsZWQ9e3dvcmRXcmFwLmlzRW5hYmxlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8Q29weUJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5jb2RlQnV0dG9ufSBjb2RlPXtjb2RlfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvQ29udGFpbmVyPlxuICApXG59XG4iXX0=
