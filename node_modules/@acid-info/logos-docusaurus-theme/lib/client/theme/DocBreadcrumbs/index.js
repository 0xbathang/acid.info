"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const theme_common_1 = require("@docusaurus/theme-common");
const internal_1 = require("@docusaurus/theme-common/internal");
const Link_1 = tslib_1.__importDefault(require("@docusaurus/Link"));
const Translate_1 = require("@docusaurus/Translate");
const styles_module_css_1 = tslib_1.__importDefault(require("./styles.module.css"));
const lsd_react_1 = require("@acid-info/lsd-react");
const useDocusaurusContext_1 = tslib_1.__importDefault(require("@docusaurus/useDocusaurusContext"));
// TODO move to design system folder
function BreadcrumbsItemLink({ children, href, isLast }) {
    const className = 'breadcrumbs__link';
    if (isLast) {
        return (react_1.default.createElement(lsd_react_1.Typography, { variant: "body3", component: "span", className: className, itemProp: "name" }, children));
    }
    return href ? (react_1.default.createElement(Link_1.default, { className: className, href: href, itemProp: "item" },
        react_1.default.createElement(lsd_react_1.Typography, { variant: "body3", component: "span", itemProp: "name" }, children))) : (
    // TODO Google search console doesn't like breadcrumb items without href.
    // The schema doesn't seem to require `id` for each `item`, although Google
    // insist to infer one, even if it's invalid. Removing `itemProp="item
    // name"` for now, since I don't know how to properly fix it.
    // See https://github.com/facebook/docusaurus/issues/7241
    react_1.default.createElement(lsd_react_1.Typography, { variant: "body3", component: "span", className: className }, children));
}
// TODO move to design system folder
function BreadcrumbsItem({ children, active, index, addMicrodata }) {
    return (react_1.default.createElement("li", { ...(addMicrodata && {
            itemScope: true,
            itemProp: 'itemListElement',
            itemType: 'https://schema.org/ListItem',
        }), className: (0, clsx_1.default)('breadcrumbs__item', {
            'breadcrumbs__item--active': active,
        }) },
        children,
        react_1.default.createElement("meta", { itemProp: "position", content: String(index + 1) })));
}
function DocBreadcrumbs() {
    const breadcrumbs = (0, internal_1.useSidebarBreadcrumbs)();
    const homePageRoute = (0, internal_1.useHomePageRoute)();
    const { siteConfig } = (0, useDocusaurusContext_1.default)();
    if (!breadcrumbs) {
        return null;
    }
    //@ts-ignore
    const routeBasePath = siteConfig.presets[0][1].docs.routeBasePath;
    return (react_1.default.createElement("nav", { className: (0, clsx_1.default)(theme_common_1.ThemeClassNames.docs.docBreadcrumbs, styles_module_css_1.default.breadcrumbsContainer), "aria-label": (0, Translate_1.translate)({
            id: 'theme.docs.breadcrumbs.navAriaLabel',
            message: 'Breadcrumbs',
            description: 'The ARIA label for the breadcrumbs',
        }) },
        react_1.default.createElement("ul", { className: "breadcrumbs", itemScope: true, itemType: "https://schema.org/BreadcrumbList" },
            homePageRoute && (react_1.default.createElement(lsd_react_1.Typography, { className: (0, clsx_1.default)('breadcrumbs__item'), variant: "body3", component: "a", href: routeBasePath }, "Home")),
            breadcrumbs.map((item, idx) => {
                const isLast = idx === breadcrumbs.length - 1;
                return (react_1.default.createElement(BreadcrumbsItem, { key: idx, active: isLast, index: idx, addMicrodata: !!item.href },
                    react_1.default.createElement(BreadcrumbsItemLink, { href: item.href, isLast: isLast }, item.label)));
            }))));
}
exports.default = DocBreadcrumbs;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
