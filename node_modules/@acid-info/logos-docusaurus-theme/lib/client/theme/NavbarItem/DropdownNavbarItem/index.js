"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lsd_react_1 = require("@acid-info/lsd-react");
const theme_common_1 = require("@docusaurus/theme-common");
const internal_1 = require("@docusaurus/theme-common/internal");
const NavbarItem_1 = tslib_1.__importDefault(require("@theme/NavbarItem"));
const NavbarNavLink_1 = tslib_1.__importDefault(require("@theme/NavbarItem/NavbarNavLink"));
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = tslib_1.__importStar(require("react"));
const styles_module_scss_1 = tslib_1.__importDefault(require("./styles.module.scss"));
function isItemActive(item, localPathname) {
    if ((0, internal_1.isSamePath)(item.to, localPathname)) {
        return true;
    }
    if ((0, theme_common_1.isRegexpStringMatch)(item.activeBaseRegex, localPathname)) {
        return true;
    }
    if (item.activeBasePath && localPathname.startsWith(item.activeBasePath)) {
        return true;
    }
    return false;
}
function containsActiveItems(items, localPathname) {
    return items.some((item) => isItemActive(item, localPathname));
}
function DropdownNavbarItemDesktop({ items, position, className, onClick, ...props }) {
    const dropdownRef = (0, react_1.useRef)(null);
    const [showDropdown, setShowDropdown] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        const handleClickOutside = (event) => {
            if (!dropdownRef.current || dropdownRef.current.contains(event.target)) {
                return;
            }
            setShowDropdown(false);
        };
        document.addEventListener('mousedown', handleClickOutside);
        document.addEventListener('touchstart', handleClickOutside);
        document.addEventListener('focusin', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
            document.removeEventListener('touchstart', handleClickOutside);
            document.removeEventListener('focusin', handleClickOutside);
        };
    }, [dropdownRef]);
    return (react_1.default.createElement("div", { ref: dropdownRef, className: (0, clsx_1.default)('navbar__item', styles_module_scss_1.default.dropdownNavbarItem, 'dropdown', 'dropdown--hoverable', {
            'dropdown--right': position === 'right',
            'dropdown--show': showDropdown,
        }) },
        react_1.default.createElement(NavbarNavLink_1.default, { "aria-haspopup": "true", "aria-expanded": showDropdown, role: "button", href: props.to ? undefined : '#', className: (0, clsx_1.default)('navbar__link', className), ...props, onClick: props.to ? undefined : (e) => e.preventDefault(), onKeyDown: (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    setShowDropdown(!showDropdown);
                }
            } }, props.children ?? props.label),
        react_1.default.createElement(lsd_react_1.ArrowDownIcon, { className: (0, clsx_1.default)('margin-left-8', 'cursor-pointer') }),
        react_1.default.createElement("ul", { className: "dropdown__menu" }, items.map((childItemProps, i) => (react_1.default.createElement(NavbarItem_1.default, { isDropdownItem: true, activeClassName: "dropdown__link--active", ...childItemProps, key: i }))))));
}
function DropdownNavbarItemMobile({ items, className, position, // Need to destructure position from props so that it doesn't get passed on.
onClick, ...props }) {
    const localPathname = (0, internal_1.useLocalPathname)();
    const containsActive = containsActiveItems(items, localPathname);
    const { collapsed, toggleCollapsed, setCollapsed } = (0, theme_common_1.useCollapsible)({
        initialState: () => !containsActive,
    });
    // Expand/collapse if any item active after a navigation
    (0, react_1.useEffect)(() => {
        if (containsActive) {
            setCollapsed(!containsActive);
        }
    }, [localPathname, containsActive, setCollapsed]);
    return (react_1.default.createElement("li", { className: (0, clsx_1.default)('menu__list-item', {
            'menu__list-item--collapsed': collapsed,
        }) },
        react_1.default.createElement(NavbarNavLink_1.default, { role: "button", className: (0, clsx_1.default)('menu__link menu__link--sublist menu__link--sublist-caret', className), ...props, onClick: (e) => {
                e.preventDefault();
                toggleCollapsed();
            } },
            react_1.default.createElement(lsd_react_1.Typography, { variant: "body1" }, props.children ?? props.label)),
        react_1.default.createElement(theme_common_1.Collapsible, { lazy: true, as: "ul", className: "menu__list", collapsed: collapsed }, items.map((childItemProps, i) => (react_1.default.createElement(NavbarItem_1.default, { mobile: true, isDropdownItem: true, onClick: onClick, activeClassName: "menu__link--active", ...childItemProps, key: i }))))));
}
function DropdownNavbarItem({ mobile = false, ...props }) {
    const Comp = mobile ? DropdownNavbarItemMobile : DropdownNavbarItemDesktop;
    //@ts-ignore
    return react_1.default.createElement(Comp, { ...props });
}
exports.default = DropdownNavbarItem;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
