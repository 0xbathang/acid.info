"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const useDocusaurusContext_1 = tslib_1.__importDefault(require("@docusaurus/useDocusaurusContext"));
const internal_1 = require("@docusaurus/theme-common/internal");
const Translate_1 = require("@docusaurus/Translate");
const router_1 = require("@docusaurus/router");
const DropdownNavbarItem_1 = tslib_1.__importDefault(require("@theme/NavbarItem/DropdownNavbarItem"));
function LocaleDropdownNavbarItem({ mobile, dropdownItemsBefore, dropdownItemsAfter, ...props }) {
    const { i18n: { currentLocale, locales, localeConfigs }, } = (0, useDocusaurusContext_1.default)();
    const alternatePageUtils = (0, internal_1.useAlternatePageUtils)();
    const { search, hash } = (0, router_1.useLocation)();
    const localeItems = locales.map((locale) => {
        const baseTo = `pathname://${alternatePageUtils.createUrl({
            locale,
            fullyQualified: false,
        })}`;
        // preserve ?search#hash suffix on locale switches
        const to = `${baseTo}${search}${hash}`;
        return {
            label: localeConfigs[locale]?.label,
            lang: localeConfigs[locale]?.htmlLang,
            to,
            target: '_self',
            autoAddBaseUrl: false,
            className: 
            // eslint-disable-next-line no-nested-ternary
            locale === currentLocale
                ? // Similar idea as DefaultNavbarItem: select the right Infima active
                    // class name. This cannot be substituted with isActive, because the
                    // target URLs contain `pathname://` and therefore are not NavLinks!
                    mobile
                        ? 'menu__link--active'
                        : 'dropdown__link--active'
                : '',
        };
    });
    const items = [...dropdownItemsBefore, ...localeItems, ...dropdownItemsAfter];
    // Mobile is handled a bit differently
    const dropdownLabel = mobile
        ? (0, Translate_1.translate)({
            message: 'Languages',
            id: 'theme.navbar.mobileLanguageDropdown.label',
            description: 'The label for the mobile language switcher dropdown',
        })
        : localeConfigs[currentLocale]?.label.substring(0, 2).toUpperCase();
    return (react_1.default.createElement(DropdownNavbarItem_1.default, { ...props, mobile: mobile, label: react_1.default.createElement(react_1.default.Fragment, null, dropdownLabel), items: items }));
}
exports.default = LocaleDropdownNavbarItem;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvdGhlbWUvTmF2YmFySXRlbS9Mb2NhbGVEcm9wZG93bk5hdmJhckl0ZW0vaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUF5QjtBQUN6QixvR0FBbUU7QUFDbkUsZ0VBQXlFO0FBQ3pFLHFEQUFpRDtBQUNqRCwrQ0FBZ0Q7QUFDaEQsc0dBQXFFO0FBRXJFLFNBQXdCLHdCQUF3QixDQUFDLEVBQy9DLE1BQU0sRUFDTixtQkFBbUIsRUFDbkIsa0JBQWtCLEVBQ2xCLEdBQUcsS0FBSyxFQUNUO0lBQ0MsTUFBTSxFQUNKLElBQUksRUFBRSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLEdBQ2hELEdBQUcsSUFBQSw4QkFBb0IsR0FBRSxDQUFBO0lBQzFCLE1BQU0sa0JBQWtCLEdBQUcsSUFBQSxnQ0FBcUIsR0FBRSxDQUFBO0lBQ2xELE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBQSxvQkFBVyxHQUFFLENBQUE7SUFDdEMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ3pDLE1BQU0sTUFBTSxHQUFHLGNBQWMsa0JBQWtCLENBQUMsU0FBUyxDQUFDO1lBQ3hELE1BQU07WUFDTixjQUFjLEVBQUUsS0FBSztTQUN0QixDQUFDLEVBQUUsQ0FBQTtRQUNKLGtEQUFrRDtRQUNsRCxNQUFNLEVBQUUsR0FBRyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUE7UUFDdEMsT0FBTztZQUNMLEtBQUssRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSztZQUNuQyxJQUFJLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQVE7WUFDckMsRUFBRTtZQUNGLE1BQU0sRUFBRSxPQUFPO1lBQ2YsY0FBYyxFQUFFLEtBQUs7WUFDckIsU0FBUztZQUNQLDZDQUE2QztZQUM3QyxNQUFNLEtBQUssYUFBYTtnQkFDdEIsQ0FBQyxDQUFDLG9FQUFvRTtvQkFDcEUsb0VBQW9FO29CQUNwRSxvRUFBb0U7b0JBQ3BFLE1BQU07d0JBQ04sQ0FBQyxDQUFDLG9CQUFvQjt3QkFDdEIsQ0FBQyxDQUFDLHdCQUF3QjtnQkFDNUIsQ0FBQyxDQUFDLEVBQUU7U0FDVCxDQUFBO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDRixNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsbUJBQW1CLEVBQUUsR0FBRyxXQUFXLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxDQUFBO0lBQzdFLHNDQUFzQztJQUN0QyxNQUFNLGFBQWEsR0FBRyxNQUFNO1FBQzFCLENBQUMsQ0FBQyxJQUFBLHFCQUFTLEVBQUM7WUFDUixPQUFPLEVBQUUsV0FBVztZQUNwQixFQUFFLEVBQUUsMkNBQTJDO1lBQy9DLFdBQVcsRUFBRSxxREFBcUQ7U0FDbkUsQ0FBQztRQUNKLENBQUMsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7SUFFckUsT0FBTyxDQUNMLDhCQUFDLDRCQUFrQixPQUNiLEtBQUssRUFDVCxNQUFNLEVBQUUsTUFBTSxFQUNkLEtBQUssRUFBRSw4REFBRyxhQUFhLENBQUksRUFDM0IsS0FBSyxFQUFFLEtBQUssR0FDWixDQUNILENBQUE7QUFDSCxDQUFDO0FBdERELDJDQXNEQyIsImZpbGUiOiJjbGllbnQvdGhlbWUvTmF2YmFySXRlbS9Mb2NhbGVEcm9wZG93bk5hdmJhckl0ZW0vaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgdXNlRG9jdXNhdXJ1c0NvbnRleHQgZnJvbSAnQGRvY3VzYXVydXMvdXNlRG9jdXNhdXJ1c0NvbnRleHQnXG5pbXBvcnQgeyB1c2VBbHRlcm5hdGVQYWdlVXRpbHMgfSBmcm9tICdAZG9jdXNhdXJ1cy90aGVtZS1jb21tb24vaW50ZXJuYWwnXG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdAZG9jdXNhdXJ1cy9UcmFuc2xhdGUnXG5pbXBvcnQgeyB1c2VMb2NhdGlvbiB9IGZyb20gJ0Bkb2N1c2F1cnVzL3JvdXRlcidcbmltcG9ydCBEcm9wZG93bk5hdmJhckl0ZW0gZnJvbSAnQHRoZW1lL05hdmJhckl0ZW0vRHJvcGRvd25OYXZiYXJJdGVtJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2NhbGVEcm9wZG93bk5hdmJhckl0ZW0oe1xuICBtb2JpbGUsXG4gIGRyb3Bkb3duSXRlbXNCZWZvcmUsXG4gIGRyb3Bkb3duSXRlbXNBZnRlcixcbiAgLi4ucHJvcHNcbn0pIHtcbiAgY29uc3Qge1xuICAgIGkxOG46IHsgY3VycmVudExvY2FsZSwgbG9jYWxlcywgbG9jYWxlQ29uZmlncyB9LFxuICB9ID0gdXNlRG9jdXNhdXJ1c0NvbnRleHQoKVxuICBjb25zdCBhbHRlcm5hdGVQYWdlVXRpbHMgPSB1c2VBbHRlcm5hdGVQYWdlVXRpbHMoKVxuICBjb25zdCB7IHNlYXJjaCwgaGFzaCB9ID0gdXNlTG9jYXRpb24oKVxuICBjb25zdCBsb2NhbGVJdGVtcyA9IGxvY2FsZXMubWFwKChsb2NhbGUpID0+IHtcbiAgICBjb25zdCBiYXNlVG8gPSBgcGF0aG5hbWU6Ly8ke2FsdGVybmF0ZVBhZ2VVdGlscy5jcmVhdGVVcmwoe1xuICAgICAgbG9jYWxlLFxuICAgICAgZnVsbHlRdWFsaWZpZWQ6IGZhbHNlLFxuICAgIH0pfWBcbiAgICAvLyBwcmVzZXJ2ZSA/c2VhcmNoI2hhc2ggc3VmZml4IG9uIGxvY2FsZSBzd2l0Y2hlc1xuICAgIGNvbnN0IHRvID0gYCR7YmFzZVRvfSR7c2VhcmNofSR7aGFzaH1gXG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBsb2NhbGVDb25maWdzW2xvY2FsZV0/LmxhYmVsLFxuICAgICAgbGFuZzogbG9jYWxlQ29uZmlnc1tsb2NhbGVdPy5odG1sTGFuZyxcbiAgICAgIHRvLFxuICAgICAgdGFyZ2V0OiAnX3NlbGYnLFxuICAgICAgYXV0b0FkZEJhc2VVcmw6IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lOlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAgICAgbG9jYWxlID09PSBjdXJyZW50TG9jYWxlXG4gICAgICAgICAgPyAvLyBTaW1pbGFyIGlkZWEgYXMgRGVmYXVsdE5hdmJhckl0ZW06IHNlbGVjdCB0aGUgcmlnaHQgSW5maW1hIGFjdGl2ZVxuICAgICAgICAgICAgLy8gY2xhc3MgbmFtZS4gVGhpcyBjYW5ub3QgYmUgc3Vic3RpdHV0ZWQgd2l0aCBpc0FjdGl2ZSwgYmVjYXVzZSB0aGVcbiAgICAgICAgICAgIC8vIHRhcmdldCBVUkxzIGNvbnRhaW4gYHBhdGhuYW1lOi8vYCBhbmQgdGhlcmVmb3JlIGFyZSBub3QgTmF2TGlua3MhXG4gICAgICAgICAgICBtb2JpbGVcbiAgICAgICAgICAgID8gJ21lbnVfX2xpbmstLWFjdGl2ZSdcbiAgICAgICAgICAgIDogJ2Ryb3Bkb3duX19saW5rLS1hY3RpdmUnXG4gICAgICAgICAgOiAnJyxcbiAgICB9XG4gIH0pXG4gIGNvbnN0IGl0ZW1zID0gWy4uLmRyb3Bkb3duSXRlbXNCZWZvcmUsIC4uLmxvY2FsZUl0ZW1zLCAuLi5kcm9wZG93bkl0ZW1zQWZ0ZXJdXG4gIC8vIE1vYmlsZSBpcyBoYW5kbGVkIGEgYml0IGRpZmZlcmVudGx5XG4gIGNvbnN0IGRyb3Bkb3duTGFiZWwgPSBtb2JpbGVcbiAgICA/IHRyYW5zbGF0ZSh7XG4gICAgICAgIG1lc3NhZ2U6ICdMYW5ndWFnZXMnLFxuICAgICAgICBpZDogJ3RoZW1lLm5hdmJhci5tb2JpbGVMYW5ndWFnZURyb3Bkb3duLmxhYmVsJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgbGFiZWwgZm9yIHRoZSBtb2JpbGUgbGFuZ3VhZ2Ugc3dpdGNoZXIgZHJvcGRvd24nLFxuICAgICAgfSlcbiAgICA6IGxvY2FsZUNvbmZpZ3NbY3VycmVudExvY2FsZV0/LmxhYmVsLnN1YnN0cmluZygwLCAyKS50b1VwcGVyQ2FzZSgpXG5cbiAgcmV0dXJuIChcbiAgICA8RHJvcGRvd25OYXZiYXJJdGVtXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBtb2JpbGU9e21vYmlsZX1cbiAgICAgIGxhYmVsPXs8Pntkcm9wZG93bkxhYmVsfTwvPn1cbiAgICAgIGl0ZW1zPXtpdGVtc31cbiAgICAvPlxuICApXG59XG4iXX0=
