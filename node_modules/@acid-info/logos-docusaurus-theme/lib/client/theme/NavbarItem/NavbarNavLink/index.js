"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const Link_1 = tslib_1.__importDefault(require("@docusaurus/Link"));
const useBaseUrl_1 = tslib_1.__importDefault(require("@docusaurus/useBaseUrl"));
const isInternalUrl_1 = tslib_1.__importDefault(require("@docusaurus/isInternalUrl"));
const theme_common_1 = require("@docusaurus/theme-common");
const lsd_react_1 = require("@acid-info/lsd-react");
const styles_module_css_1 = tslib_1.__importDefault(require("./styles.module.css"));
function NavbarNavLink({ activeBasePath, activeBaseRegex, to, href, label, html, isDropdownLink, prependBaseUrlToHref, ...props }) {
    // TODO all this seems hacky
    // {to: 'version'} should probably be forbidden, in favor of {to: '/version'}
    const toUrl = (0, useBaseUrl_1.default)(to);
    const activeBaseUrl = (0, useBaseUrl_1.default)(activeBasePath);
    const normalizedHref = (0, useBaseUrl_1.default)(href, { forcePrependBaseUrl: true });
    const isExternalLink = label && href && !(0, isInternalUrl_1.default)(href);
    // Link content is set through html XOR label
    const linkContentProps = html
        ? { dangerouslySetInnerHTML: { __html: html } }
        : {
            children: (react_1.default.createElement(lsd_react_1.Typography, { component: "div", variant: "body2", className: styles_module_css_1.default.linkContent },
                label,
                isExternalLink && react_1.default.createElement(lsd_react_1.PickIcon, { color: "primary" }))),
        };
    if (href) {
        return (react_1.default.createElement(Link_1.default, { href: prependBaseUrlToHref ? normalizedHref : href, ...props, ...linkContentProps }));
    }
    return (react_1.default.createElement(Link_1.default, { to: toUrl, isNavLink: true, ...((activeBasePath || activeBaseRegex) && {
            isActive: (_match, location) => activeBaseRegex
                ? (0, theme_common_1.isRegexpStringMatch)(activeBaseRegex, location.pathname)
                : location.pathname.startsWith(activeBaseUrl),
        }), ...props, ...linkContentProps }));
}
exports.default = NavbarNavLink;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvdGhlbWUvTmF2YmFySXRlbS9OYXZiYXJOYXZMaW5rL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBeUI7QUFDekIsb0VBQW1DO0FBQ25DLGdGQUErQztBQUMvQyxzRkFBcUQ7QUFDckQsMkRBQThEO0FBQzlELG9EQUEyRDtBQUMzRCxvRkFBd0M7QUFFeEMsU0FBd0IsYUFBYSxDQUFDLEVBQ3BDLGNBQWMsRUFDZCxlQUFlLEVBQ2YsRUFBRSxFQUNGLElBQUksRUFDSixLQUFLLEVBQ0wsSUFBSSxFQUNKLGNBQWMsRUFDZCxvQkFBb0IsRUFDcEIsR0FBRyxLQUFLLEVBQ1Q7SUFDQyw0QkFBNEI7SUFDNUIsNkVBQTZFO0lBQzdFLE1BQU0sS0FBSyxHQUFHLElBQUEsb0JBQVUsRUFBQyxFQUFFLENBQUMsQ0FBQTtJQUM1QixNQUFNLGFBQWEsR0FBRyxJQUFBLG9CQUFVLEVBQUMsY0FBYyxDQUFDLENBQUE7SUFDaEQsTUFBTSxjQUFjLEdBQUcsSUFBQSxvQkFBVSxFQUFDLElBQUksRUFBRSxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDdEUsTUFBTSxjQUFjLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUEsdUJBQWEsRUFBQyxJQUFJLENBQUMsQ0FBQTtJQUU1RCw2Q0FBNkM7SUFDN0MsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJO1FBQzNCLENBQUMsQ0FBQyxFQUFFLHVCQUF1QixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFO1FBQy9DLENBQUMsQ0FBQztZQUNFLFFBQVEsRUFBRSxDQUNSLDhCQUFDLHNCQUFVLElBQ1QsU0FBUyxFQUFDLEtBQUssRUFDZixPQUFPLEVBQUMsT0FBTyxFQUNmLFNBQVMsRUFBRSwyQkFBTSxDQUFDLFdBQVc7Z0JBRTVCLEtBQUs7Z0JBQ0wsY0FBYyxJQUFJLDhCQUFDLG9CQUFRLElBQUMsS0FBSyxFQUFDLFNBQVMsR0FBRyxDQUNwQyxDQUNkO1NBQ0YsQ0FBQTtJQUVMLElBQUksSUFBSSxFQUFFO1FBQ1IsT0FBTyxDQUNMLDhCQUFDLGNBQUksSUFDSCxJQUFJLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUM5QyxLQUFLLEtBQ0wsZ0JBQWdCLEdBQ3BCLENBQ0gsQ0FBQTtLQUNGO0lBRUQsT0FBTyxDQUNMLDhCQUFDLGNBQUksSUFDSCxFQUFFLEVBQUUsS0FBSyxFQUNULFNBQVMsV0FDTCxDQUFDLENBQUMsY0FBYyxJQUFJLGVBQWUsQ0FBQyxJQUFJO1lBQzFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUM3QixlQUFlO2dCQUNiLENBQUMsQ0FBQyxJQUFBLGtDQUFtQixFQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDO2dCQUN6RCxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1NBQ2xELENBQUMsS0FDRSxLQUFLLEtBQ0wsZ0JBQWdCLEdBQ3BCLENBQ0gsQ0FBQTtBQUNILENBQUM7QUExREQsZ0NBMERDIiwiZmlsZSI6ImNsaWVudC90aGVtZS9OYXZiYXJJdGVtL05hdmJhck5hdkxpbmsvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgTGluayBmcm9tICdAZG9jdXNhdXJ1cy9MaW5rJ1xuaW1wb3J0IHVzZUJhc2VVcmwgZnJvbSAnQGRvY3VzYXVydXMvdXNlQmFzZVVybCdcbmltcG9ydCBpc0ludGVybmFsVXJsIGZyb20gJ0Bkb2N1c2F1cnVzL2lzSW50ZXJuYWxVcmwnXG5pbXBvcnQgeyBpc1JlZ2V4cFN0cmluZ01hdGNoIH0gZnJvbSAnQGRvY3VzYXVydXMvdGhlbWUtY29tbW9uJ1xuaW1wb3J0IHsgUGlja0ljb24sIFR5cG9ncmFwaHkgfSBmcm9tICdAYWNpZC1pbmZvL2xzZC1yZWFjdCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLmNzcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmF2YmFyTmF2TGluayh7XG4gIGFjdGl2ZUJhc2VQYXRoLFxuICBhY3RpdmVCYXNlUmVnZXgsXG4gIHRvLFxuICBocmVmLFxuICBsYWJlbCxcbiAgaHRtbCxcbiAgaXNEcm9wZG93bkxpbmssXG4gIHByZXBlbmRCYXNlVXJsVG9IcmVmLFxuICAuLi5wcm9wc1xufSkge1xuICAvLyBUT0RPIGFsbCB0aGlzIHNlZW1zIGhhY2t5XG4gIC8vIHt0bzogJ3ZlcnNpb24nfSBzaG91bGQgcHJvYmFibHkgYmUgZm9yYmlkZGVuLCBpbiBmYXZvciBvZiB7dG86ICcvdmVyc2lvbid9XG4gIGNvbnN0IHRvVXJsID0gdXNlQmFzZVVybCh0bylcbiAgY29uc3QgYWN0aXZlQmFzZVVybCA9IHVzZUJhc2VVcmwoYWN0aXZlQmFzZVBhdGgpXG4gIGNvbnN0IG5vcm1hbGl6ZWRIcmVmID0gdXNlQmFzZVVybChocmVmLCB7IGZvcmNlUHJlcGVuZEJhc2VVcmw6IHRydWUgfSlcbiAgY29uc3QgaXNFeHRlcm5hbExpbmsgPSBsYWJlbCAmJiBocmVmICYmICFpc0ludGVybmFsVXJsKGhyZWYpXG5cbiAgLy8gTGluayBjb250ZW50IGlzIHNldCB0aHJvdWdoIGh0bWwgWE9SIGxhYmVsXG4gIGNvbnN0IGxpbmtDb250ZW50UHJvcHMgPSBodG1sXG4gICAgPyB7IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogaHRtbCB9IH1cbiAgICA6IHtcbiAgICAgICAgY2hpbGRyZW46IChcbiAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgY29tcG9uZW50PVwiZGl2XCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJib2R5MlwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5saW5rQ29udGVudH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICB7aXNFeHRlcm5hbExpbmsgJiYgPFBpY2tJY29uIGNvbG9yPVwicHJpbWFyeVwiIC8+fVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgKSxcbiAgICAgIH1cblxuICBpZiAoaHJlZikge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlua1xuICAgICAgICBocmVmPXtwcmVwZW5kQmFzZVVybFRvSHJlZiA/IG5vcm1hbGl6ZWRIcmVmIDogaHJlZn1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICB7Li4ubGlua0NvbnRlbnRQcm9wc31cbiAgICAgIC8+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TGlua1xuICAgICAgdG89e3RvVXJsfVxuICAgICAgaXNOYXZMaW5rXG4gICAgICB7Li4uKChhY3RpdmVCYXNlUGF0aCB8fCBhY3RpdmVCYXNlUmVnZXgpICYmIHtcbiAgICAgICAgaXNBY3RpdmU6IChfbWF0Y2gsIGxvY2F0aW9uKSA9PlxuICAgICAgICAgIGFjdGl2ZUJhc2VSZWdleFxuICAgICAgICAgICAgPyBpc1JlZ2V4cFN0cmluZ01hdGNoKGFjdGl2ZUJhc2VSZWdleCwgbG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICAgICAgICA6IGxvY2F0aW9uLnBhdGhuYW1lLnN0YXJ0c1dpdGgoYWN0aXZlQmFzZVVybCksXG4gICAgICB9KX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIHsuLi5saW5rQ29udGVudFByb3BzfVxuICAgIC8+XG4gIClcbn1cbiJdfQ==
