"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Controls = void 0;
const tslib_1 = require("tslib");
const HeroModel_configs_1 = require("./HeroModel.configs");
const react_1 = tslib_1.__importStar(require("react"));
const useScrollY_1 = require("../../../lib/useScrollY");
const fiber_1 = require("@react-three/fiber");
const drei_1 = require("@react-three/drei");
const ui_utils_1 = require("../../../lib/ui.utils");
const lerp = (a, b, t) => (1 - t) * a + t * b;
let targetPos = [0, 0, 0];
// function calculateCameraPosition(scrollY: number): [number, number, number] {
//   const baseXZ = -1.6 // Base x and z component at scrollY = 0
//   const baseY = 4.04 // Base y component at scrollY = 0
//   const rateXZ = -0.01 // Rate of change for x and z components
//   const rateY = 0.00185 // Rate of change for y component
//   const deltaX = baseXZ + rateXZ * scrollY - baseXZ
//   const deltaY = baseY + rateY * scrollY - baseY
//   const deltaZ = baseXZ + rateXZ * scrollY - baseXZ
//   return [deltaX, deltaY, deltaZ]
// }
const MAX_SCROLL = 400;
function calculateVector(scrollY, scrollYMax, preset, target) {
    // Calculate the lerp factor based on the scroll position
    const t = Math.min(scrollY, scrollYMax) / scrollYMax;
    const newVector = [0, 0, 0];
    for (let i = 0; i < 3; i++) {
        // Perform a lerp between the preset and target for each component
        // @ts-ignore
        newVector[i] = lerp(preset[i], target[i], t);
    }
    return newVector;
}
const Controls = ({ rotateSpeed = HeroModel_configs_1.ROTATE_SPEED, enableZoom = true, enableRotateOnScroll = true, preset, targetPreset, children, ...props }) => {
    const ref = (0, react_1.useRef)();
    const scrollY = (0, useScrollY_1.useScrollY)();
    const { camera, size } = (0, fiber_1.useThree)();
    const controls = (0, react_1.useRef)();
    const [lockOrbit, setLockOrbit] = react_1.default.useState(false);
    const [scale, setScale] = react_1.default.useState(1);
    const [posY, setPosY] = react_1.default.useState(0);
    (0, fiber_1.useFrame)((state, delta) => {
        ref.current.rotation.y -=
            delta * ((0, ui_utils_1.isMobile)() ? 0.6 * rotateSpeed : rotateSpeed);
    });
    (0, react_1.useEffect)(() => {
        const onClick = () => {
            console.log(JSON.stringify({
                cameraPos: camera.position.toArray(),
                cameraRot: camera.rotation.toArray().slice(0, 3),
                controlsTarget: controls.current.target.toArray(),
            }, null, 2));
        };
        window.addEventListener('click', onClick);
        return () => window.removeEventListener('click', onClick);
    }, [camera]);
    (0, react_1.useEffect)(() => {
        if ((0, ui_utils_1.isTouchDevice)()) {
            controls.current.minPolarAngle = Math.PI / 2;
            controls.current.maxPolarAngle = Math.PI / 2;
            setTimeout(() => {
                setLockOrbit(true);
            }, 1000);
        }
    }, []);
    (0, react_1.useEffect)(() => {
        if ((0, ui_utils_1.isMobile)()) {
            setScale((0, ui_utils_1.mapFloat)(scrollY, 0, (0, ui_utils_1.calcScrollThreshold)(), 1, 0.65));
            setPosY((0, ui_utils_1.mapFloat)(scrollY, 0, (0, ui_utils_1.calcScrollThreshold)(), 0, 0.35));
        }
    }, [scrollY]);
    (0, react_1.useEffect)(() => {
        if (!enableZoom)
            return;
        if (!targetPreset)
            return;
        // we only apply zoom effect if targetPreset is defined
        const newPos = calculateVector(scrollY, MAX_SCROLL, preset.cameraPos, targetPreset.cameraPos);
        const newRot = calculateVector(scrollY, MAX_SCROLL, preset.cameraRot, targetPreset.cameraRot);
        const newTarget = calculateVector(scrollY, MAX_SCROLL, preset.controlsTarget, targetPreset.controlsTarget);
        camera.position.set(...newPos);
        camera.rotation.set(...newRot);
        controls.current.target.set(...newTarget);
        camera.updateProjectionMatrix();
    }, [scrollY, camera]);
    return (react_1.default.createElement("group", { ref: ref, ...props, scale: scale, "position-y": posY },
        children,
        react_1.default.createElement(drei_1.OrbitControls, { ref: controls, enableZoom: false, target: controls.current ? controls.current.target : preset.controlsTarget, enabled: !lockOrbit })));
};
exports.Controls = Controls;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
