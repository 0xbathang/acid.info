"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeroModel = void 0;
const tslib_1 = require("tslib");
const drei_1 = require("@react-three/drei");
const fiber_1 = require("@react-three/fiber");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = tslib_1.__importStar(require("react"));
const HeroModel_configs_1 = require("./HeroModel.configs");
const ui_utils_1 = require("../../../lib/ui.utils");
const Ascii_1 = require("./Ascii");
const Controls_1 = require("./Controls");
require("./HeroModel.scss");
const useScrollY_1 = require("../../../lib/useScrollY");
const useLookPreset = (mode, preset, modelId) => {
    return (0, react_1.useMemo)(() => {
        if (preset)
            return { ...HeroModel_configs_1.defaultPresets, [mode]: preset };
        if (!modelId)
            return HeroModel_configs_1.defaultPresets;
        const existingPreset = HeroModel_configs_1.OBJECTS_PRESETS.find((p) => p.modelId === modelId);
        return existingPreset ? existingPreset : HeroModel_configs_1.defaultPresets;
    }, [preset, modelId]);
};
const getInitialY = (mode) => {
    return mode === 'abstract' ? 0 : window.innerWidth > 997 ? 0 : 0;
};
const HeroModel = (props) => {
    const { modelId, preset: presetProp, mode = 'simple', className, children, asciiConfig, rotateSpeed = HeroModel_configs_1.ROTATE_SPEED, enableZoom, enableRotateOnScroll, withParallelEffect = true, startY = 'bottom', ...divProps } = props;
    const preset = useLookPreset(mode, presetProp, modelId);
    // const index = 4;
    // const preset = OBJECTS_PRESETS[index] ? OBJECTS_PRESETS[index] : defaultPresets;
    const scrollY = (0, useScrollY_1.useScrollY)();
    return (react_1.default.createElement("div", { className: (0, clsx_1.default)(className, 'mdx-hero-model', 'mdx-hero-model--ascii', `mdx-hero-model--${mode}`, `mdx-hero-model--${startY}`), ...divProps },
        react_1.default.createElement("div", { className: `mdx-hero-model--inner`, style: {
                ...(withParallelEffect
                    ? {
                        transform: `translateY(${0
                        // getInitialY(mode) + scrollY * 0.1
                        }px) scale(var(--mdx-hero-model-wrapper-scale))`,
                    }
                    : {}),
            } },
            react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement("span", null, " ") },
                react_1.default.createElement(fiber_1.Canvas, { dpr: [1, 2], style: {
                        height: '100vh',
                    }, camera: {
                        fov: 50,
                        position: preset[mode].cameraPos,
                        rotation: preset[mode].cameraRot,
                    } },
                    react_1.default.createElement("directionalLight", { position: [-10, 10, 0], intensity: 1.5 }),
                    react_1.default.createElement("directionalLight", { position: [-10, 10, 5], intensity: 0.3 }),
                    react_1.default.createElement("directionalLight", { position: [-10, 20, 0], intensity: 1.5 }),
                    react_1.default.createElement("directionalLight", { position: [100, -10, 0], intensity: 0.25 }),
                    react_1.default.createElement(Controls_1.Controls, { rotateSpeed: rotateSpeed, preset: preset[mode], targetPreset: preset.targetLook, enableZoom: mode !== 'simple' },
                        react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement(Model, { url: `/hero/${preset.modelId}/lo.glb` }) },
                            react_1.default.createElement(Model, { url: `/hero/${preset.modelId}/hi.glb` }),
                            react_1.default.createElement(Ascii_1.AsciiRenderer, { ...asciiConfig })))))),
        react_1.default.createElement("div", { className: 'mdx-hero-model--shade', style: {
                opacity: (0, ui_utils_1.mapFloat)(scrollY, 0, (0, ui_utils_1.calcScrollThreshold)() * HeroModel_configs_1.RESIZE_SPEED_FACTOR, 0, 1),
            } })));
};
exports.HeroModel = HeroModel;
function Model({ url, onMount = () => { }, ...props }) {
    // useGLTF suspends the component, it literally stops processing
    const { scene } = (0, drei_1.useGLTF)(url, '/scripts/draco-1.4.3/');
    (0, react_1.useEffect)(() => {
        onMount();
    }, []);
    // By the time we're here the model is gueranteed to be available
    return react_1.default.createElement("primitive", { object: scene, ...props });
}
function Rotate(props) {
    const ref = (0, react_1.useRef)();
    (0, fiber_1.useFrame)((state) => {
        if (ref.current) {
            // @ts-ignore
            return (ref.current.rotation.y = state.clock.elapsedTime);
        }
        return ref;
    });
    return react_1.default.createElement("group", { ref: ref, ...props });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
