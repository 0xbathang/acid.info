"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsciiRenderer = void 0;
const tslib_1 = require("tslib");
const HeroModel_configs_1 = require("./HeroModel.configs");
const fiber_1 = require("@react-three/fiber");
const react_1 = tslib_1.__importStar(require("react"));
const three_stdlib_1 = require("three-stdlib");
const ui_utils_1 = require("../../../lib/ui.utils");
function useAsciiEffect(config = {}) {
    const { renderIndex = HeroModel_configs_1.defaultAsciiConfigs.renderIndex, characters = HeroModel_configs_1.defaultAsciiConfigs.characters, invert = HeroModel_configs_1.defaultAsciiConfigs.invert, color = HeroModel_configs_1.defaultAsciiConfigs.color, resolution = HeroModel_configs_1.defaultAsciiConfigs.resolution, bgColor = HeroModel_configs_1.defaultAsciiConfigs.bgColor, fgColor = HeroModel_configs_1.defaultAsciiConfigs.fgColor, textShadowSize = HeroModel_configs_1.defaultAsciiConfigs.textShadowSize, withTextShadow = false, } = config;
    const { gl, size, scene, camera, viewport } = (0, fiber_1.useThree)();
    const effect = (0, react_1.useMemo)(() => {
        const effect = new three_stdlib_1.AsciiEffect(gl, characters, {
            invert,
            color,
            resolution,
        });
        effect.domElement.style.position = 'absolute';
        effect.domElement.style.top = '0px';
        effect.domElement.style.left = '0px';
        effect.domElement.style.pointerEvents = 'none';
        return effect;
    }, [characters, invert, color, resolution]);
    (0, react_1.useLayoutEffect)(() => {
        effect.domElement.style.color = fgColor;
        // effect.domElement.style.backgroundColor = bgColor
    }, [fgColor, bgColor]);
    // Append on mount, remove on unmount
    (0, react_1.useEffect)(() => {
        gl.domElement.style.opacity = '0';
        gl.domElement.parentNode.appendChild(effect.domElement);
        if (withTextShadow) {
            const style = document.createElement('style');
            style.innerHTML = `table *{text-shadow: ${(0, ui_utils_1.generateTextShadow)(textShadowSize)};`;
            effect.domElement.appendChild(style);
        }
        return () => {
            gl.domElement.style.opacity = '1';
            gl.domElement.parentNode.removeChild(effect.domElement);
        };
    }, [effect]);
    // Set size
    (0, react_1.useEffect)(() => {
        effect.setSize(size.width, size.height);
    }, [effect, size]);
    // Take over render-loop (that is what the index is for)
    (0, fiber_1.useFrame)((state) => {
        effect.render(scene, camera);
    }, renderIndex);
}
const AsciiRenderer = (configs) => {
    useAsciiEffect(configs);
    return react_1.default.createElement(react_1.default.Fragment, null);
};
exports.AsciiRenderer = AsciiRenderer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvY29tcG9uZW50cy9tZHgvSGVyb01vZGVsL0FzY2lpLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsMkRBQXlEO0FBQ3pELDhDQUF1RDtBQUN2RCx1REFBa0U7QUFDbEUsK0NBQTBDO0FBQzFDLG9EQUEwRDtBQUUxRCxTQUFTLGNBQWMsQ0FBQyxTQUF1QixFQUFFO0lBQy9DLE1BQU0sRUFDSixXQUFXLEdBQUcsdUNBQW1CLENBQUMsV0FBVyxFQUM3QyxVQUFVLEdBQUcsdUNBQW1CLENBQUMsVUFBVSxFQUMzQyxNQUFNLEdBQUcsdUNBQW1CLENBQUMsTUFBTSxFQUNuQyxLQUFLLEdBQUcsdUNBQW1CLENBQUMsS0FBSyxFQUNqQyxVQUFVLEdBQUcsdUNBQW1CLENBQUMsVUFBVSxFQUMzQyxPQUFPLEdBQUcsdUNBQW1CLENBQUMsT0FBTyxFQUNyQyxPQUFPLEdBQUcsdUNBQW1CLENBQUMsT0FBTyxFQUNyQyxjQUFjLEdBQUcsdUNBQW1CLENBQUMsY0FBYyxFQUNuRCxjQUFjLEdBQUcsS0FBSyxHQUN2QixHQUFHLE1BQU0sQ0FBQTtJQUNWLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBQSxnQkFBUSxHQUFFLENBQUE7SUFFeEQsTUFBTSxNQUFNLEdBQUcsSUFBQSxlQUFPLEVBQUMsR0FBRyxFQUFFO1FBQzFCLE1BQU0sTUFBTSxHQUFHLElBQUksMEJBQVcsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFO1lBQzdDLE1BQU07WUFDTixLQUFLO1lBQ0wsVUFBVTtTQUNYLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUE7UUFDN0MsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQTtRQUNuQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFBO1FBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUE7UUFDOUMsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBRTNDLElBQUEsdUJBQWUsRUFBQyxHQUFHLEVBQUU7UUFDbkIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQTtRQUN2QyxvREFBb0Q7SUFDdEQsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFFdEIscUNBQXFDO0lBQ3JDLElBQUEsaUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDYixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFBO1FBQ2pDLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFeEQsSUFBSSxjQUFjLEVBQUU7WUFDbEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUM3QyxLQUFLLENBQUMsU0FBUyxHQUFHLHdCQUF3QixJQUFBLDZCQUFrQixFQUMxRCxjQUFjLENBQ2YsR0FBRyxDQUFBO1lBQ0osTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDckM7UUFFRCxPQUFPLEdBQUcsRUFBRTtZQUNWLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUE7WUFDakMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUMxRCxDQUFDLENBQUE7SUFDSCxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0lBRVosV0FBVztJQUNYLElBQUEsaUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDYixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3pDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBRWxCLHdEQUF3RDtJQUN4RCxJQUFBLGdCQUFRLEVBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNqQixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUM5QixDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUE7QUFDakIsQ0FBQztBQUVNLE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBcUIsRUFBRSxFQUFFO0lBQ3JELGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN2QixPQUFPLDZEQUFLLENBQUE7QUFDZCxDQUFDLENBQUE7QUFIWSxRQUFBLGFBQWEsaUJBR3pCIiwiZmlsZSI6ImNsaWVudC9jb21wb25lbnRzL21keC9IZXJvTW9kZWwvQXNjaWkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc2NpaUNvbmZpZ3MgfSBmcm9tICcuLi8uLi8uLi90eXBlcy91aS50eXBlcydcbmltcG9ydCB7IGRlZmF1bHRBc2NpaUNvbmZpZ3MgfSBmcm9tICcuL0hlcm9Nb2RlbC5jb25maWdzJ1xuaW1wb3J0IHsgdXNlRnJhbWUsIHVzZVRocmVlIH0gZnJvbSAnQHJlYWN0LXRocmVlL2ZpYmVyJ1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBBc2NpaUVmZmVjdCB9IGZyb20gJ3RocmVlLXN0ZGxpYidcbmltcG9ydCB7IGdlbmVyYXRlVGV4dFNoYWRvdyB9IGZyb20gJy4uLy4uLy4uL2xpYi91aS51dGlscydcblxuZnVuY3Rpb24gdXNlQXNjaWlFZmZlY3QoY29uZmlnOiBBc2NpaUNvbmZpZ3MgPSB7fSkge1xuICBjb25zdCB7XG4gICAgcmVuZGVySW5kZXggPSBkZWZhdWx0QXNjaWlDb25maWdzLnJlbmRlckluZGV4LFxuICAgIGNoYXJhY3RlcnMgPSBkZWZhdWx0QXNjaWlDb25maWdzLmNoYXJhY3RlcnMsXG4gICAgaW52ZXJ0ID0gZGVmYXVsdEFzY2lpQ29uZmlncy5pbnZlcnQsXG4gICAgY29sb3IgPSBkZWZhdWx0QXNjaWlDb25maWdzLmNvbG9yLFxuICAgIHJlc29sdXRpb24gPSBkZWZhdWx0QXNjaWlDb25maWdzLnJlc29sdXRpb24sXG4gICAgYmdDb2xvciA9IGRlZmF1bHRBc2NpaUNvbmZpZ3MuYmdDb2xvcixcbiAgICBmZ0NvbG9yID0gZGVmYXVsdEFzY2lpQ29uZmlncy5mZ0NvbG9yLFxuICAgIHRleHRTaGFkb3dTaXplID0gZGVmYXVsdEFzY2lpQ29uZmlncy50ZXh0U2hhZG93U2l6ZSxcbiAgICB3aXRoVGV4dFNoYWRvdyA9IGZhbHNlLFxuICB9ID0gY29uZmlnXG4gIGNvbnN0IHsgZ2wsIHNpemUsIHNjZW5lLCBjYW1lcmEsIHZpZXdwb3J0IH0gPSB1c2VUaHJlZSgpXG5cbiAgY29uc3QgZWZmZWN0ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgZWZmZWN0ID0gbmV3IEFzY2lpRWZmZWN0KGdsLCBjaGFyYWN0ZXJzLCB7XG4gICAgICBpbnZlcnQsXG4gICAgICBjb2xvcixcbiAgICAgIHJlc29sdXRpb24sXG4gICAgfSlcbiAgICBlZmZlY3QuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSdcbiAgICBlZmZlY3QuZG9tRWxlbWVudC5zdHlsZS50b3AgPSAnMHB4J1xuICAgIGVmZmVjdC5kb21FbGVtZW50LnN0eWxlLmxlZnQgPSAnMHB4J1xuICAgIGVmZmVjdC5kb21FbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSdcbiAgICByZXR1cm4gZWZmZWN0XG4gIH0sIFtjaGFyYWN0ZXJzLCBpbnZlcnQsIGNvbG9yLCByZXNvbHV0aW9uXSlcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGVmZmVjdC5kb21FbGVtZW50LnN0eWxlLmNvbG9yID0gZmdDb2xvclxuICAgIC8vIGVmZmVjdC5kb21FbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGJnQ29sb3JcbiAgfSwgW2ZnQ29sb3IsIGJnQ29sb3JdKVxuXG4gIC8vIEFwcGVuZCBvbiBtb3VudCwgcmVtb3ZlIG9uIHVubW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBnbC5kb21FbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCdcbiAgICBnbC5kb21FbGVtZW50LnBhcmVudE5vZGUhLmFwcGVuZENoaWxkKGVmZmVjdC5kb21FbGVtZW50KVxuXG4gICAgaWYgKHdpdGhUZXh0U2hhZG93KSB7XG4gICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgICAgIHN0eWxlLmlubmVySFRNTCA9IGB0YWJsZSAqe3RleHQtc2hhZG93OiAke2dlbmVyYXRlVGV4dFNoYWRvdyhcbiAgICAgICAgdGV4dFNoYWRvd1NpemUsXG4gICAgICApfTtgXG4gICAgICBlZmZlY3QuZG9tRWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZ2wuZG9tRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzEnXG4gICAgICBnbC5kb21FbGVtZW50LnBhcmVudE5vZGUhLnJlbW92ZUNoaWxkKGVmZmVjdC5kb21FbGVtZW50KVxuICAgIH1cbiAgfSwgW2VmZmVjdF0pXG5cbiAgLy8gU2V0IHNpemVcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBlZmZlY3Quc2V0U2l6ZShzaXplLndpZHRoLCBzaXplLmhlaWdodClcbiAgfSwgW2VmZmVjdCwgc2l6ZV0pXG5cbiAgLy8gVGFrZSBvdmVyIHJlbmRlci1sb29wICh0aGF0IGlzIHdoYXQgdGhlIGluZGV4IGlzIGZvcilcbiAgdXNlRnJhbWUoKHN0YXRlKSA9PiB7XG4gICAgZWZmZWN0LnJlbmRlcihzY2VuZSwgY2FtZXJhKVxuICB9LCByZW5kZXJJbmRleClcbn1cblxuZXhwb3J0IGNvbnN0IEFzY2lpUmVuZGVyZXIgPSAoY29uZmlnczogQXNjaWlDb25maWdzKSA9PiB7XG4gIHVzZUFzY2lpRWZmZWN0KGNvbmZpZ3MpXG4gIHJldHVybiA8PjwvPlxufVxuIl19
