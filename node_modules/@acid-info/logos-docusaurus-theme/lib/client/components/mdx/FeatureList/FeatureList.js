"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureList = void 0;
const tslib_1 = require("tslib");
const lsd_react_1 = require("@acid-info/lsd-react");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = tslib_1.__importDefault(require("react"));
require("./FeatureList.scss");
const FeatureList = ({ title = 'Features', features = [], className, children, ...props }) => {
    return (react_1.default.createElement("div", { className: (0, clsx_1.default)(className, 'mdx-feature-list'), ...props },
        react_1.default.createElement(lsd_react_1.Typography, { variant: "h6", component: "h1", className: "mdx-feature-list__title" }, title),
        react_1.default.createElement("div", { className: "mdx-feature-list__list" }, features.map((feature, index) => (react_1.default.createElement("div", { key: index, className: (0, clsx_1.default)('mdx-feature-list__feature') },
            react_1.default.createElement("div", { className: "mdx-feature-list__feature-inner" },
                react_1.default.createElement(lsd_react_1.Typography, { variant: "subtitle1", component: "div", className: "mdx-feature-list__feature-index" }, index + 1),
                react_1.default.createElement(lsd_react_1.Typography, { variant: "h3", component: "h2", className: "mdx-feature-list__feature-title" }, feature.title),
                react_1.default.createElement(lsd_react_1.Typography, { variant: "h6", component: "h3", className: "mdx-feature-list__feature-description" }, feature.description)))))),
        react_1.default.createElement("div", { className: "mdx-feature-list__extra" }, children)));
};
exports.FeatureList = FeatureList;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvY29tcG9uZW50cy9tZHgvRmVhdHVyZUxpc3QvRmVhdHVyZUxpc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxvREFBaUQ7QUFDakQsd0RBQXVCO0FBQ3ZCLDBEQUF5QjtBQUN6Qiw4QkFBMkI7QUFlcEIsTUFBTSxXQUFXLEdBQStCLENBQUMsRUFDdEQsS0FBSyxHQUFHLFVBQVUsRUFDbEIsUUFBUSxHQUFHLEVBQUUsRUFDYixTQUFTLEVBQ1QsUUFBUSxFQUNSLEdBQUcsS0FBSyxFQUNULEVBQUUsRUFBRTtJQUNILE9BQU8sQ0FDTCx1Q0FBSyxTQUFTLEVBQUUsSUFBQSxjQUFJLEVBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLEtBQU0sS0FBSztRQUM1RCw4QkFBQyxzQkFBVSxJQUNULE9BQU8sRUFBQyxJQUFJLEVBQ1osU0FBUyxFQUFDLElBQUksRUFDZCxTQUFTLEVBQUMseUJBQXlCLElBRWxDLEtBQUssQ0FDSztRQUNiLHVDQUFLLFNBQVMsRUFBQyx3QkFBd0IsSUFDcEMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQ2hDLHVDQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUEsY0FBSSxFQUFDLDJCQUEyQixDQUFDO1lBQzNELHVDQUFLLFNBQVMsRUFBQyxpQ0FBaUM7Z0JBQzlDLDhCQUFDLHNCQUFVLElBQ1QsT0FBTyxFQUFDLFdBQVcsRUFDbkIsU0FBUyxFQUFDLEtBQUssRUFDZixTQUFTLEVBQUMsaUNBQWlDLElBRTFDLEtBQUssR0FBRyxDQUFDLENBQ0M7Z0JBQ2IsOEJBQUMsc0JBQVUsSUFDVCxPQUFPLEVBQUMsSUFBSSxFQUNaLFNBQVMsRUFBQyxJQUFJLEVBQ2QsU0FBUyxFQUFDLGlDQUFpQyxJQUUxQyxPQUFPLENBQUMsS0FBSyxDQUNIO2dCQUNiLDhCQUFDLHNCQUFVLElBQ1QsT0FBTyxFQUFDLElBQUksRUFDWixTQUFTLEVBQUMsSUFBSSxFQUNkLFNBQVMsRUFBQyx1Q0FBdUMsSUFFaEQsT0FBTyxDQUFDLFdBQVcsQ0FDVCxDQUNULENBQ0YsQ0FDUCxDQUFDLENBQ0U7UUFDTix1Q0FBSyxTQUFTLEVBQUMseUJBQXlCLElBQUUsUUFBUSxDQUFPLENBQ3JELENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQWhEWSxRQUFBLFdBQVcsZUFnRHZCIiwiZmlsZSI6ImNsaWVudC9jb21wb25lbnRzL21keC9GZWF0dXJlTGlzdC9GZWF0dXJlTGlzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cG9ncmFwaHkgfSBmcm9tICdAYWNpZC1pbmZvL2xzZC1yZWFjdCdcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgJy4vRmVhdHVyZUxpc3Quc2NzcydcblxuZXhwb3J0IHR5cGUgRmVhdHVyZSA9IHtcbiAgdGl0bGU6IFJlYWN0LlJlYWN0Tm9kZVxuICBkZXNjcmlwdGlvbjogUmVhY3QuUmVhY3ROb2RlXG59XG5cbmV4cG9ydCB0eXBlIEZlYXR1cmVMaXN0UHJvcHMgPSBPbWl0PFxuICBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4sXG4gICd0aXRsZSdcbj4gJiB7XG4gIHRpdGxlPzogUmVhY3QuUmVhY3ROb2RlXG4gIGZlYXR1cmVzPzogRmVhdHVyZVtdXG59XG5cbmV4cG9ydCBjb25zdCBGZWF0dXJlTGlzdDogUmVhY3QuRkM8RmVhdHVyZUxpc3RQcm9wcz4gPSAoe1xuICB0aXRsZSA9ICdGZWF0dXJlcycsXG4gIGZlYXR1cmVzID0gW10sXG4gIGNsYXNzTmFtZSxcbiAgY2hpbGRyZW4sXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Nsc3goY2xhc3NOYW1lLCAnbWR4LWZlYXR1cmUtbGlzdCcpfSB7Li4ucHJvcHN9PlxuICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgdmFyaWFudD1cImg2XCJcbiAgICAgICAgY29tcG9uZW50PVwiaDFcIlxuICAgICAgICBjbGFzc05hbWU9XCJtZHgtZmVhdHVyZS1saXN0X190aXRsZVwiXG4gICAgICA+XG4gICAgICAgIHt0aXRsZX1cbiAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWR4LWZlYXR1cmUtbGlzdF9fbGlzdFwiPlxuICAgICAgICB7ZmVhdHVyZXMubWFwKChmZWF0dXJlLCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxkaXYga2V5PXtpbmRleH0gY2xhc3NOYW1lPXtjbHN4KCdtZHgtZmVhdHVyZS1saXN0X19mZWF0dXJlJyl9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZHgtZmVhdHVyZS1saXN0X19mZWF0dXJlLWlubmVyXCI+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgdmFyaWFudD1cInN1YnRpdGxlMVwiXG4gICAgICAgICAgICAgICAgY29tcG9uZW50PVwiZGl2XCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtZHgtZmVhdHVyZS1saXN0X19mZWF0dXJlLWluZGV4XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtpbmRleCArIDF9XG4gICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgICB2YXJpYW50PVwiaDNcIlxuICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cImgyXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtZHgtZmVhdHVyZS1saXN0X19mZWF0dXJlLXRpdGxlXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtmZWF0dXJlLnRpdGxlfVxuICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgdmFyaWFudD1cImg2XCJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJoM1wiXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWR4LWZlYXR1cmUtbGlzdF9fZmVhdHVyZS1kZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7ZmVhdHVyZS5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1keC1mZWF0dXJlLWxpc3RfX2V4dHJhXCI+e2NoaWxkcmVufTwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG4iXX0=
