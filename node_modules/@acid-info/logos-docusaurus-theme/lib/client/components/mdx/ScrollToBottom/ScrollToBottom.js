"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScrollToBottom = void 0;
const tslib_1 = require("tslib");
const lsd_react_1 = require("@acid-info/lsd-react");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = tslib_1.__importDefault(require("react"));
const styles_module_scss_1 = tslib_1.__importDefault(require("./styles.module.scss"));
const useScrollY_1 = require("../../../lib/useScrollY");
const ui_utils_1 = require("../../../lib/ui.utils");
const ScrollToBottom = (props) => {
    const { children, className, ...rest } = props;
    const scrollY = (0, useScrollY_1.useScrollY)();
    const handleScrollToBottom = () => {
        const article = document.querySelector('.main-wrapper article');
        const secondElement = article?.children?.[1];
        if (!secondElement)
            return void window.scrollTo({
                top: document.body.scrollHeight,
                behavior: 'smooth',
            });
        if ((0, ui_utils_1.isMobile)()) {
            window.scrollTo(0, secondElement.getBoundingClientRect().top - 200);
        }
        else {
            ;
            secondElement?.scrollIntoView?.({ behavior: 'smooth' });
        }
        return;
    };
    return (react_1.default.createElement(lsd_react_1.IconButton, { onClick: handleScrollToBottom, size: "small", className: (0, clsx_1.default)(styles_module_scss_1.default.scrollToBottom, className, scrollY > 20 ? styles_module_scss_1.default.hide : ''), ...rest },
        react_1.default.createElement(lsd_react_1.ArrowDownIcon, { color: "primary" })));
};
exports.ScrollToBottom = ScrollToBottom;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvY29tcG9uZW50cy9tZHgvU2Nyb2xsVG9Cb3R0b20vU2Nyb2xsVG9Cb3R0b20udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxvREFBZ0U7QUFDaEUsd0RBQXVCO0FBQ3ZCLDBEQUF3QztBQUN4QyxzRkFBeUM7QUFDekMsd0RBQW9EO0FBQ3BELG9EQUFnRTtBQUl6RCxNQUFNLGNBQWMsR0FBRyxDQUM1QixLQUE0QyxFQUMvQixFQUFFO0lBQ2YsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUE7SUFDOUMsTUFBTSxPQUFPLEdBQUcsSUFBQSx1QkFBVSxHQUFFLENBQUE7SUFDNUIsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLEVBQUU7UUFDaEMsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1FBQy9ELE1BQU0sYUFBYSxHQUFHLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUU1QyxJQUFJLENBQUMsYUFBYTtZQUNoQixPQUFPLEtBQUssTUFBTSxDQUFDLFFBQVEsQ0FBQztnQkFDMUIsR0FBRyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWTtnQkFDL0IsUUFBUSxFQUFFLFFBQVE7YUFDbkIsQ0FBQyxDQUFBO1FBRUosSUFBSSxJQUFBLG1CQUFRLEdBQUUsRUFBRTtZQUNkLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQTtTQUNwRTthQUFNO1lBQ0wsQ0FBQztZQUFDLGFBQTZCLEVBQUUsY0FBYyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtTQUMxRTtRQUNELE9BQU07SUFDUixDQUFDLENBQUE7SUFFRCxPQUFPLENBQ0wsOEJBQUMsc0JBQVUsSUFDVCxPQUFPLEVBQUUsb0JBQW9CLEVBQzdCLElBQUksRUFBQyxPQUFPLEVBQ1osU0FBUyxFQUFFLElBQUEsY0FBSSxFQUNiLDRCQUFNLENBQUMsY0FBYyxFQUNyQixTQUFTLEVBQ1QsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsNEJBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDaEMsS0FDSSxJQUFZO1FBRWpCLDhCQUFDLHlCQUFhLElBQUMsS0FBSyxFQUFDLFNBQVMsR0FBRyxDQUN0QixDQUNkLENBQUE7QUFDSCxDQUFDLENBQUE7QUFyQ1ksUUFBQSxjQUFjLGtCQXFDMUIiLCJmaWxlIjoiY2xpZW50L2NvbXBvbmVudHMvbWR4L1Njcm9sbFRvQm90dG9tL1Njcm9sbFRvQm90dG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJyb3dEb3duSWNvbiwgSWNvbkJ1dHRvbiB9IGZyb20gJ0BhY2lkLWluZm8vbHNkLXJlYWN0J1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCdcbmltcG9ydCBSZWFjdCwgeyBIVE1MUHJvcHMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMubW9kdWxlLnNjc3MnXG5pbXBvcnQgeyB1c2VTY3JvbGxZIH0gZnJvbSAnLi4vLi4vLi4vbGliL3VzZVNjcm9sbFknXG5pbXBvcnQgeyBjYWxjSGVyb0luZm9NYiwgaXNNb2JpbGUgfSBmcm9tICcuLi8uLi8uLi9saWIvdWkudXRpbHMnXG5cbnR5cGUgVFByb3BzID0ge31cblxuZXhwb3J0IGNvbnN0IFNjcm9sbFRvQm90dG9tID0gKFxuICBwcm9wczogVFByb3BzICYgSFRNTFByb3BzPEhUTUxCdXR0b25FbGVtZW50Pixcbik6IEpTWC5FbGVtZW50ID0+IHtcbiAgY29uc3QgeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCAuLi5yZXN0IH0gPSBwcm9wc1xuICBjb25zdCBzY3JvbGxZID0gdXNlU2Nyb2xsWSgpXG4gIGNvbnN0IGhhbmRsZVNjcm9sbFRvQm90dG9tID0gKCkgPT4ge1xuICAgIGNvbnN0IGFydGljbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi13cmFwcGVyIGFydGljbGUnKVxuICAgIGNvbnN0IHNlY29uZEVsZW1lbnQgPSBhcnRpY2xlPy5jaGlsZHJlbj8uWzFdXG5cbiAgICBpZiAoIXNlY29uZEVsZW1lbnQpXG4gICAgICByZXR1cm4gdm9pZCB3aW5kb3cuc2Nyb2xsVG8oe1xuICAgICAgICB0b3A6IGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICB9KVxuXG4gICAgaWYgKGlzTW9iaWxlKCkpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBzZWNvbmRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIDIwMClcbiAgICB9IGVsc2Uge1xuICAgICAgOyhzZWNvbmRFbGVtZW50IGFzIEhUTUxFbGVtZW50KT8uc2Nyb2xsSW50b1ZpZXc/Lih7IGJlaGF2aW9yOiAnc21vb3RoJyB9KVxuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEljb25CdXR0b25cbiAgICAgIG9uQ2xpY2s9e2hhbmRsZVNjcm9sbFRvQm90dG9tfVxuICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgc3R5bGVzLnNjcm9sbFRvQm90dG9tLFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIHNjcm9sbFkgPiAyMCA/IHN0eWxlcy5oaWRlIDogJycsXG4gICAgICApfVxuICAgICAgey4uLihyZXN0IGFzIGFueSl9XG4gICAgPlxuICAgICAgPEFycm93RG93bkljb24gY29sb3I9XCJwcmltYXJ5XCIgLz5cbiAgICA8L0ljb25CdXR0b24+XG4gIClcbn1cbiJdfQ==
