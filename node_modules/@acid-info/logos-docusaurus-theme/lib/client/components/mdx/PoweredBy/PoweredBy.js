"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoweredBy = void 0;
const tslib_1 = require("tslib");
const lsd_react_1 = require("@acid-info/lsd-react");
const theme_common_1 = require("@docusaurus/theme-common");
const react_1 = tslib_1.__importDefault(require("react"));
require("./PoweredBy.scss");
const PoweredBy = ({ items = [], ...props }) => {
    const { colorMode } = (0, theme_common_1.useColorMode)();
    return (react_1.default.createElement("div", { className: "mdx-powered-by" }, items.map((item, index) => {
        const logoSrc = item.logoSrc ?? item.logoSrcDark;
        return (react_1.default.createElement("div", { key: index, className: "mdx-powered-by__card" },
            logoSrc && (react_1.default.createElement("img", { alt: typeof item.name === 'string' ? item.name : '', className: "mdx-powered-by__logo", src: (colorMode === 'dark' ? item.logoSrcDark : item.logoSrc) ??
                    logoSrc })),
            react_1.default.createElement(lsd_react_1.Typography, { component: "span", variant: "h5", className: "mdx-powered-by__name" }, item.name),
            react_1.default.createElement(lsd_react_1.Typography, { variant: "subtitle1", className: "mdx-powered-by__description" }, item.description),
            item.link && (react_1.default.createElement("a", { href: item.link, target: "_blank", className: "mdx-powered-by__link" },
                react_1.default.createElement(lsd_react_1.Button, { size: "large", variant: "outlined" },
                    react_1.default.createElement(lsd_react_1.Typography, { variant: "label1", component: "span" }, item.linkLabel ?? react_1.default.createElement(react_1.default.Fragment, null,
                        "Visit ",
                        item.name)),
                    react_1.default.createElement("span", null,
                        react_1.default.createElement(lsd_react_1.PickIcon, { color: "primary" })))))));
    })));
};
exports.PoweredBy = PoweredBy;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvY29tcG9uZW50cy9tZHgvUG93ZXJlZEJ5L1Bvd2VyZWRCeS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG9EQUFtRTtBQUNuRSwyREFBdUQ7QUFDdkQsMERBQXlCO0FBQ3pCLDRCQUF5QjtBQWVsQixNQUFNLFNBQVMsR0FBNkIsQ0FBQyxFQUNsRCxLQUFLLEdBQUcsRUFBRSxFQUNWLEdBQUcsS0FBSyxFQUNULEVBQUUsRUFBRTtJQUNILE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFBLDJCQUFZLEdBQUUsQ0FBQTtJQUVwQyxPQUFPLENBQ0wsdUNBQUssU0FBUyxFQUFDLGdCQUFnQixJQUM1QixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3pCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQTtRQUVoRCxPQUFPLENBQ0wsdUNBQUssR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsc0JBQXNCO1lBQzlDLE9BQU8sSUFBSSxDQUNWLHVDQUNFLEdBQUcsRUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ25ELFNBQVMsRUFBQyxzQkFBc0IsRUFDaEMsR0FBRyxFQUNELENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFDeEQsT0FBTyxHQUVULENBQ0g7WUFDRCw4QkFBQyxzQkFBVSxJQUNULFNBQVMsRUFBQyxNQUFNLEVBQ2hCLE9BQU8sRUFBQyxJQUFJLEVBQ1osU0FBUyxFQUFDLHNCQUFzQixJQUUvQixJQUFJLENBQUMsSUFBSSxDQUNDO1lBQ2IsOEJBQUMsc0JBQVUsSUFDVCxPQUFPLEVBQUMsV0FBVyxFQUNuQixTQUFTLEVBQUMsNkJBQTZCLElBRXRDLElBQUksQ0FBQyxXQUFXLENBQ047WUFDWixJQUFJLENBQUMsSUFBSSxJQUFJLENBQ1oscUNBQ0UsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQ2YsTUFBTSxFQUFDLFFBQVEsRUFDZixTQUFTLEVBQUMsc0JBQXNCO2dCQUVoQyw4QkFBQyxrQkFBTSxJQUFDLElBQUksRUFBQyxPQUFPLEVBQUMsT0FBTyxFQUFDLFVBQVU7b0JBQ3JDLDhCQUFDLHNCQUFVLElBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxTQUFTLEVBQUMsTUFBTSxJQUMxQyxJQUFJLENBQUMsU0FBUyxJQUFJOzt3QkFBUyxJQUFJLENBQUMsSUFBSSxDQUFJLENBQzlCO29CQUNiO3dCQUNFLDhCQUFDLG9CQUFRLElBQUMsS0FBSyxFQUFDLFNBQVMsR0FBRyxDQUN2QixDQUNBLENBQ1AsQ0FDTCxDQUNHLENBQ1AsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUNFLENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQXpEWSxRQUFBLFNBQVMsYUF5RHJCIiwiZmlsZSI6ImNsaWVudC9jb21wb25lbnRzL21keC9Qb3dlcmVkQnkvUG93ZXJlZEJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uLCBQaWNrSWNvbiwgVHlwb2dyYXBoeSB9IGZyb20gJ0BhY2lkLWluZm8vbHNkLXJlYWN0J1xuaW1wb3J0IHsgdXNlQ29sb3JNb2RlIH0gZnJvbSAnQGRvY3VzYXVydXMvdGhlbWUtY29tbW9uJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0ICcuL1Bvd2VyZWRCeS5zY3NzJ1xuXG5leHBvcnQgdHlwZSBQb3dlcmVkQnlJdGVtID0ge1xuICBsb2dvU3JjPzogc3RyaW5nXG4gIGxvZ29TcmNEYXJrPzogc3RyaW5nXG4gIG5hbWU/OiBSZWFjdC5SZWFjdE5vZGVcbiAgZGVzY3JpcHRpb24/OiBSZWFjdC5SZWFjdE5vZGVcbiAgbGluaz86IHN0cmluZ1xuICBsaW5rTGFiZWw/OiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgUG93ZXJlZEJ5UHJvcHMgPSBSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+ICYge1xuICBpdGVtcz86IFBvd2VyZWRCeUl0ZW1bXVxufVxuXG5leHBvcnQgY29uc3QgUG93ZXJlZEJ5OiBSZWFjdC5GQzxQb3dlcmVkQnlQcm9wcz4gPSAoe1xuICBpdGVtcyA9IFtdLFxuICAuLi5wcm9wc1xufSkgPT4ge1xuICBjb25zdCB7IGNvbG9yTW9kZSB9ID0gdXNlQ29sb3JNb2RlKClcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWR4LXBvd2VyZWQtYnlcIj5cbiAgICAgIHtpdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGxvZ29TcmMgPSBpdGVtLmxvZ29TcmMgPz8gaXRlbS5sb2dvU3JjRGFya1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9XCJtZHgtcG93ZXJlZC1ieV9fY2FyZFwiPlxuICAgICAgICAgICAge2xvZ29TcmMgJiYgKFxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgYWx0PXt0eXBlb2YgaXRlbS5uYW1lID09PSAnc3RyaW5nJyA/IGl0ZW0ubmFtZSA6ICcnfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1keC1wb3dlcmVkLWJ5X19sb2dvXCJcbiAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgKGNvbG9yTW9kZSA9PT0gJ2RhcmsnID8gaXRlbS5sb2dvU3JjRGFyayA6IGl0ZW0ubG9nb1NyYykgPz9cbiAgICAgICAgICAgICAgICAgIGxvZ29TcmNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgY29tcG9uZW50PVwic3BhblwiXG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJoNVwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1keC1wb3dlcmVkLWJ5X19uYW1lXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2l0ZW0ubmFtZX1cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtZHgtcG93ZXJlZC1ieV9fZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7aXRlbS5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIHtpdGVtLmxpbmsgJiYgKFxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGhyZWY9e2l0ZW0ubGlua31cbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1keC1wb3dlcmVkLWJ5X19saW5rXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gc2l6ZT1cImxhcmdlXCIgdmFyaWFudD1cIm91dGxpbmVkXCI+XG4gICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwibGFiZWwxXCIgY29tcG9uZW50PVwic3BhblwiPlxuICAgICAgICAgICAgICAgICAgICB7aXRlbS5saW5rTGFiZWwgPz8gPD5WaXNpdCB7aXRlbS5uYW1lfTwvPn1cbiAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICA8UGlja0ljb24gY29sb3I9XCJwcmltYXJ5XCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgICAgfSl9XG4gICAgPC9kaXY+XG4gIClcbn1cbiJdfQ==
